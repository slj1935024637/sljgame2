{"ast":null,"code":"import _classCallCheck from \"D:/slj_doc/game_2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/slj_doc/game_2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.array.fill.js\";\nimport \"core-js/modules/es.date.now.js\";\nvar Projectile = /*#__PURE__*/function () {\n  function Projectile(x, y, velocityX, velocityY, damage) {\n    var angle = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n    _classCallCheck(this, Projectile);\n    this.x = x;\n    this.y = y;\n    this.velocityX = velocityX;\n    this.velocityY = velocityY;\n    this.damage = damage;\n    this.angle = angle;\n    this.width = 20;\n    this.height = 6;\n    this.gravity = 0.2;\n    this.lifetime = 3000; // 3 seconds\n    this.spawnTime = Date.now();\n    this.active = true;\n  }\n  return _createClass(Projectile, [{\n    key: \"update\",\n    value: function update(deltaTime) {\n      if (!this.active) return;\n\n      // Update position\n      this.x += this.velocityX * deltaTime;\n      this.y += this.velocityY * deltaTime;\n\n      // Apply gravity\n      this.velocityY += this.gravity;\n\n      // Update angle to follow motion\n      this.angle = Math.atan2(this.velocityY, this.velocityX);\n\n      // Check lifetime\n      if (Date.now() - this.spawnTime > this.lifetime) {\n        this.active = false;\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(ctx) {\n      if (!this.active) return;\n      ctx.save();\n\n      // Move to arrow position and rotate\n      ctx.translate(this.x, this.y);\n      ctx.rotate(this.angle);\n\n      // Add glow effect\n      ctx.shadowBlur = 10;\n      ctx.shadowColor = '#FFD700';\n\n      // Draw arrow body (golden)\n      ctx.fillStyle = '#FFD700';\n      ctx.beginPath();\n      ctx.moveTo(-this.width / 2, 0);\n      ctx.lineTo(-this.width / 4, -this.height / 2);\n      ctx.lineTo(this.width / 2, 0);\n      ctx.lineTo(-this.width / 4, this.height / 2);\n      ctx.closePath();\n      ctx.fill();\n\n      // Draw arrow tail\n      ctx.fillStyle = '#FFA500';\n      ctx.beginPath();\n      ctx.moveTo(-this.width / 2, 0);\n      ctx.lineTo(-this.width / 2 - 5, -this.height / 2);\n      ctx.lineTo(-this.width / 2 - 2, 0);\n      ctx.lineTo(-this.width / 2 - 5, this.height / 2);\n      ctx.closePath();\n      ctx.fill();\n      ctx.restore();\n    }\n  }, {\n    key: \"checkCollision\",\n    value: function checkCollision(enemy) {\n      if (!this.active) return false;\n\n      // Simple rectangle collision detection\n      var projectileLeft = this.x - this.width / 2;\n      var projectileRight = this.x + this.width / 2;\n      var projectileTop = this.y - this.height / 2;\n      var projectileBottom = this.y + this.height / 2;\n      var enemyLeft = enemy.x;\n      var enemyRight = enemy.x + enemy.width;\n      var enemyTop = enemy.y;\n      var enemyBottom = enemy.y + enemy.height;\n      return projectileRight >= enemyLeft && projectileLeft <= enemyRight && projectileBottom >= enemyTop && projectileTop <= enemyBottom;\n    }\n  }]);\n}();\nexport { Projectile as default };","map":{"version":3,"names":["Projectile","x","y","velocityX","velocityY","damage","angle","arguments","length","undefined","_classCallCheck","width","height","gravity","lifetime","spawnTime","Date","now","active","_createClass","key","value","update","deltaTime","Math","atan2","draw","ctx","save","translate","rotate","shadowBlur","shadowColor","fillStyle","beginPath","moveTo","lineTo","closePath","fill","restore","checkCollision","enemy","projectileLeft","projectileRight","projectileTop","projectileBottom","enemyLeft","enemyRight","enemyTop","enemyBottom","default"],"sources":["D:/slj_doc/game_2/src/game/entities/Projectile.js"],"sourcesContent":["export default class Projectile {\n  constructor(x, y, velocityX, velocityY, damage, angle = 0) {\n    this.x = x\n    this.y = y\n    this.velocityX = velocityX\n    this.velocityY = velocityY\n    this.damage = damage\n    this.angle = angle\n    this.width = 20\n    this.height = 6\n    this.gravity = 0.2\n    this.lifetime = 3000 // 3 seconds\n    this.spawnTime = Date.now()\n    this.active = true\n  }\n\n  update(deltaTime) {\n    if (!this.active) return\n\n    // Update position\n    this.x += this.velocityX * deltaTime\n    this.y += this.velocityY * deltaTime\n    \n    // Apply gravity\n    this.velocityY += this.gravity\n\n    // Update angle to follow motion\n    this.angle = Math.atan2(this.velocityY, this.velocityX)\n\n    // Check lifetime\n    if (Date.now() - this.spawnTime > this.lifetime) {\n      this.active = false\n    }\n  }\n\n  draw(ctx) {\n    if (!this.active) return\n\n    ctx.save()\n    \n    // Move to arrow position and rotate\n    ctx.translate(this.x, this.y)\n    ctx.rotate(this.angle)\n\n    // Add glow effect\n    ctx.shadowBlur = 10\n    ctx.shadowColor = '#FFD700'\n    \n    // Draw arrow body (golden)\n    ctx.fillStyle = '#FFD700'\n    ctx.beginPath()\n    ctx.moveTo(-this.width/2, 0)\n    ctx.lineTo(-this.width/4, -this.height/2)\n    ctx.lineTo(this.width/2, 0)\n    ctx.lineTo(-this.width/4, this.height/2)\n    ctx.closePath()\n    ctx.fill()\n\n    // Draw arrow tail\n    ctx.fillStyle = '#FFA500'\n    ctx.beginPath()\n    ctx.moveTo(-this.width/2, 0)\n    ctx.lineTo(-this.width/2 - 5, -this.height/2)\n    ctx.lineTo(-this.width/2 - 2, 0)\n    ctx.lineTo(-this.width/2 - 5, this.height/2)\n    ctx.closePath()\n    ctx.fill()\n\n    ctx.restore()\n  }\n\n  checkCollision(enemy) {\n    if (!this.active) return false\n\n    // Simple rectangle collision detection\n    const projectileLeft = this.x - this.width/2\n    const projectileRight = this.x + this.width/2\n    const projectileTop = this.y - this.height/2\n    const projectileBottom = this.y + this.height/2\n\n    const enemyLeft = enemy.x\n    const enemyRight = enemy.x + enemy.width\n    const enemyTop = enemy.y\n    const enemyBottom = enemy.y + enemy.height\n\n    return projectileRight >= enemyLeft &&\n           projectileLeft <= enemyRight &&\n           projectileBottom >= enemyTop &&\n           projectileTop <= enemyBottom\n  }\n}\n"],"mappings":";;;;IAAqBA,UAAU;EAC7B,SAAAA,WAAYC,CAAC,EAAEC,CAAC,EAAEC,SAAS,EAAEC,SAAS,EAAEC,MAAM,EAAa;IAAA,IAAXC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;IAAAG,eAAA,OAAAV,UAAA;IACvD,IAAI,CAACC,CAAC,GAAGA,CAAC;IACV,IAAI,CAACC,CAAC,GAAGA,CAAC;IACV,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACK,KAAK,GAAG,EAAE;IACf,IAAI,CAACC,MAAM,GAAG,CAAC;IACf,IAAI,CAACC,OAAO,GAAG,GAAG;IAClB,IAAI,CAACC,QAAQ,GAAG,IAAI,EAAC;IACrB,IAAI,CAACC,SAAS,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;IAC3B,IAAI,CAACC,MAAM,GAAG,IAAI;EACpB;EAAC,OAAAC,YAAA,CAAAnB,UAAA;IAAAoB,GAAA;IAAAC,KAAA,EAED,SAAAC,MAAMA,CAACC,SAAS,EAAE;MAChB,IAAI,CAAC,IAAI,CAACL,MAAM,EAAE;;MAElB;MACA,IAAI,CAACjB,CAAC,IAAI,IAAI,CAACE,SAAS,GAAGoB,SAAS;MACpC,IAAI,CAACrB,CAAC,IAAI,IAAI,CAACE,SAAS,GAAGmB,SAAS;;MAEpC;MACA,IAAI,CAACnB,SAAS,IAAI,IAAI,CAACS,OAAO;;MAE9B;MACA,IAAI,CAACP,KAAK,GAAGkB,IAAI,CAACC,KAAK,CAAC,IAAI,CAACrB,SAAS,EAAE,IAAI,CAACD,SAAS,CAAC;;MAEvD;MACA,IAAIa,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAACF,SAAS,GAAG,IAAI,CAACD,QAAQ,EAAE;QAC/C,IAAI,CAACI,MAAM,GAAG,KAAK;MACrB;IACF;EAAC;IAAAE,GAAA;IAAAC,KAAA,EAED,SAAAK,IAAIA,CAACC,GAAG,EAAE;MACR,IAAI,CAAC,IAAI,CAACT,MAAM,EAAE;MAElBS,GAAG,CAACC,IAAI,CAAC,CAAC;;MAEV;MACAD,GAAG,CAACE,SAAS,CAAC,IAAI,CAAC5B,CAAC,EAAE,IAAI,CAACC,CAAC,CAAC;MAC7ByB,GAAG,CAACG,MAAM,CAAC,IAAI,CAACxB,KAAK,CAAC;;MAEtB;MACAqB,GAAG,CAACI,UAAU,GAAG,EAAE;MACnBJ,GAAG,CAACK,WAAW,GAAG,SAAS;;MAE3B;MACAL,GAAG,CAACM,SAAS,GAAG,SAAS;MACzBN,GAAG,CAACO,SAAS,CAAC,CAAC;MACfP,GAAG,CAACQ,MAAM,CAAC,CAAC,IAAI,CAACxB,KAAK,GAAC,CAAC,EAAE,CAAC,CAAC;MAC5BgB,GAAG,CAACS,MAAM,CAAC,CAAC,IAAI,CAACzB,KAAK,GAAC,CAAC,EAAE,CAAC,IAAI,CAACC,MAAM,GAAC,CAAC,CAAC;MACzCe,GAAG,CAACS,MAAM,CAAC,IAAI,CAACzB,KAAK,GAAC,CAAC,EAAE,CAAC,CAAC;MAC3BgB,GAAG,CAACS,MAAM,CAAC,CAAC,IAAI,CAACzB,KAAK,GAAC,CAAC,EAAE,IAAI,CAACC,MAAM,GAAC,CAAC,CAAC;MACxCe,GAAG,CAACU,SAAS,CAAC,CAAC;MACfV,GAAG,CAACW,IAAI,CAAC,CAAC;;MAEV;MACAX,GAAG,CAACM,SAAS,GAAG,SAAS;MACzBN,GAAG,CAACO,SAAS,CAAC,CAAC;MACfP,GAAG,CAACQ,MAAM,CAAC,CAAC,IAAI,CAACxB,KAAK,GAAC,CAAC,EAAE,CAAC,CAAC;MAC5BgB,GAAG,CAACS,MAAM,CAAC,CAAC,IAAI,CAACzB,KAAK,GAAC,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAACC,MAAM,GAAC,CAAC,CAAC;MAC7Ce,GAAG,CAACS,MAAM,CAAC,CAAC,IAAI,CAACzB,KAAK,GAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;MAChCgB,GAAG,CAACS,MAAM,CAAC,CAAC,IAAI,CAACzB,KAAK,GAAC,CAAC,GAAG,CAAC,EAAE,IAAI,CAACC,MAAM,GAAC,CAAC,CAAC;MAC5Ce,GAAG,CAACU,SAAS,CAAC,CAAC;MACfV,GAAG,CAACW,IAAI,CAAC,CAAC;MAEVX,GAAG,CAACY,OAAO,CAAC,CAAC;IACf;EAAC;IAAAnB,GAAA;IAAAC,KAAA,EAED,SAAAmB,cAAcA,CAACC,KAAK,EAAE;MACpB,IAAI,CAAC,IAAI,CAACvB,MAAM,EAAE,OAAO,KAAK;;MAE9B;MACA,IAAMwB,cAAc,GAAG,IAAI,CAACzC,CAAC,GAAG,IAAI,CAACU,KAAK,GAAC,CAAC;MAC5C,IAAMgC,eAAe,GAAG,IAAI,CAAC1C,CAAC,GAAG,IAAI,CAACU,KAAK,GAAC,CAAC;MAC7C,IAAMiC,aAAa,GAAG,IAAI,CAAC1C,CAAC,GAAG,IAAI,CAACU,MAAM,GAAC,CAAC;MAC5C,IAAMiC,gBAAgB,GAAG,IAAI,CAAC3C,CAAC,GAAG,IAAI,CAACU,MAAM,GAAC,CAAC;MAE/C,IAAMkC,SAAS,GAAGL,KAAK,CAACxC,CAAC;MACzB,IAAM8C,UAAU,GAAGN,KAAK,CAACxC,CAAC,GAAGwC,KAAK,CAAC9B,KAAK;MACxC,IAAMqC,QAAQ,GAAGP,KAAK,CAACvC,CAAC;MACxB,IAAM+C,WAAW,GAAGR,KAAK,CAACvC,CAAC,GAAGuC,KAAK,CAAC7B,MAAM;MAE1C,OAAO+B,eAAe,IAAIG,SAAS,IAC5BJ,cAAc,IAAIK,UAAU,IAC5BF,gBAAgB,IAAIG,QAAQ,IAC5BJ,aAAa,IAAIK,WAAW;IACrC;EAAC;AAAA;AAAA,SAzFkBjD,UAAU,IAAAkD,OAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}