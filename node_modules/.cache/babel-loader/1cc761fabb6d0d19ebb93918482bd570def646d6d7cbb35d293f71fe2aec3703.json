{"ast":null,"code":"var _createForOfIteratorHelper = require(\"D:/slj_doc/game_2/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\")[\"default\"];\nvar _classCallCheck = require(\"D:/slj_doc/game_2/node_modules/@babel/runtime/helpers/classCallCheck.js\")[\"default\"];\nvar _createClass = require(\"D:/slj_doc/game_2/node_modules/@babel/runtime/helpers/createClass.js\")[\"default\"];\nrequire(\"core-js/modules/es.array.concat.js\");\nrequire(\"core-js/modules/es.array.fill.js\");\nrequire(\"core-js/modules/es.array.filter.js\");\nrequire(\"core-js/modules/es.array.for-each.js\");\nrequire(\"core-js/modules/es.array.push.js\");\nrequire(\"core-js/modules/es.array.splice.js\");\nrequire(\"core-js/modules/es.date.now.js\");\nrequire(\"core-js/modules/es.function.bind.js\");\nrequire(\"core-js/modules/es.object.to-string.js\");\nrequire(\"core-js/modules/es.string.starts-with.js\");\nrequire(\"core-js/modules/esnext.iterator.constructor.js\");\nrequire(\"core-js/modules/esnext.iterator.filter.js\");\nrequire(\"core-js/modules/esnext.iterator.for-each.js\");\nrequire(\"core-js/modules/web.dom-collections.for-each.js\");\nrequire(\"core-js/modules/web.dom-collections.iterator.js\");\nvar Game = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function Game(canvas) {\n    _classCallCheck(this, Game);\n    this.canvas = canvas;\n    this.setupCanvas();\n    this.ctx = canvas.getContext('2d');\n    this.width = canvas.width;\n    this.height = canvas.height;\n    this.tileSize = 32;\n\n    // 游戏状态\n    this.gameState = {\n      score: 0,\n      level: 1,\n      gameOver: false,\n      paused: false\n    };\n\n    // 初始化玩家\n    this.player = new Player(100, 100, this);\n\n    // 初始化敌人系统\n    this.enemies = [];\n    this.projectiles = [];\n    this.maxEnemies = 5; // 减少最大敌人数量\n    this.enemySpawnTimer = 0;\n    this.enemySpawnInterval = 5000; // 增加敌人生成间隔到5秒\n    this.lastEnemySpawnTime = 0; // 记录上次生成敌人的时间\n\n    // 初始化地形\n    this.terrain = [];\n\n    // 相机系统\n    this.camera = {\n      x: 0,\n      y: 0,\n      width: canvas.width,\n      height: canvas.height\n    };\n\n    // 输入处理\n    this.keys = {};\n    this.setupInputHandlers();\n\n    // 调试模式\n    this.debug = false;\n\n    // 生成初始地形\n    this.generateInitialTerrain();\n\n    // 开始游戏循环\n    this.lastTime = 0;\n    this.lastFrameTime = 0;\n    requestAnimationFrame(this.gameLoop.bind(this));\n\n    // 新增：跟踪已生成的地形范围\n    this.generatedTerrainStart = 0;\n    this.generatedTerrainEnd = this.canvas.width * 3;\n  }\n  return _createClass(Game, [{\n    key: \"setupCanvas\",\n    value: function setupCanvas() {\n      this.canvas.width = 800;\n      this.canvas.height = 600;\n    }\n  }, {\n    key: \"setupInputHandlers\",\n    value: function setupInputHandlers() {\n      var _this = this;\n      window.addEventListener('keydown', function (e) {\n        // 防止空格键滚动页面\n        if (e.key === ' ') {\n          e.preventDefault();\n        }\n        _this.keys[e.key] = true;\n      });\n      window.addEventListener('keyup', function (e) {\n        _this.keys[e.key] = false;\n      });\n\n      // 禁用右键菜单\n      this.canvas.addEventListener('contextmenu', function (e) {\n        e.preventDefault();\n      });\n    }\n  }, {\n    key: \"spawnEnemy\",\n    value: function spawnEnemy() {\n      var currentTime = performance.now();\n      if (currentTime - this.lastEnemySpawnTime < this.enemySpawnInterval) {\n        return;\n      }\n      if (this.enemies.length >= this.maxEnemies) {\n        return;\n      }\n\n      // 在玩家视野范围外，但不要太远的地方生成敌人\n      var spawnDistance = this.canvas.width + 100; // 比屏幕宽度多一点\n      var spawnX = this.player.x + (Math.random() > 0.5 ? spawnDistance : -spawnDistance);\n\n      // 找到生成点的地面高度\n      var groundY = this.canvas.height;\n      var _iterator = _createForOfIteratorHelper(this.terrain),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var tile = _step.value;\n          if (!tile.solid) continue;\n          if (tile.x <= spawnX && tile.x + this.tileSize > spawnX && tile.y < groundY) {\n            groundY = tile.y;\n          }\n        }\n\n        // 在地面上方生成敌人\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      if (groundY < this.canvas.height) {\n        var enemy = new Enemy(spawnX, groundY - this.tileSize, this);\n        this.enemies.push(enemy);\n        this.lastEnemySpawnTime = currentTime;\n      }\n    }\n  }, {\n    key: \"gameLoop\",\n    value: function gameLoop(timestamp) {\n      var _this2 = this;\n      // 计算时间增量\n      var deltaTime = timestamp - this.lastTime;\n      this.lastTime = timestamp;\n\n      // 更新游戏状态\n      this.update(deltaTime);\n\n      // 清空画布\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n      // 保存当前上下文状态\n      this.ctx.save();\n\n      // 应用摄像机变换\n      this.ctx.translate(-this.camera.x, -this.camera.y);\n\n      // 绘制背景\n      this.drawBackground();\n\n      // 绘制地形\n      this.terrain.forEach(function (tile) {\n        if (tile.x >= _this2.camera.x - _this2.tileSize && tile.x <= _this2.camera.x + _this2.canvas.width + _this2.tileSize) {\n          _this2.drawTile(tile);\n        }\n      });\n\n      // 绘制玩家\n      if (this.player) {\n        this.player.draw(this.ctx);\n      }\n\n      // 绘制敌人\n      this.enemies.forEach(function (enemy) {\n        if (enemy.x >= _this2.camera.x - _this2.tileSize && enemy.x <= _this2.camera.x + _this2.canvas.width + _this2.tileSize) {\n          enemy.draw(_this2.ctx);\n        }\n      });\n\n      // 绘制投射物\n      this.projectiles.forEach(function (projectile) {\n        if (projectile.x >= _this2.camera.x - _this2.tileSize && projectile.x <= _this2.camera.x + _this2.canvas.width + _this2.tileSize) {\n          projectile.draw(_this2.ctx);\n        }\n      });\n\n      // 恢复上下文状态\n      this.ctx.restore();\n\n      // 继续游戏循环\n      requestAnimationFrame(this.gameLoop.bind(this));\n    }\n  }, {\n    key: \"update\",\n    value: function update(deltaTime) {\n      if (this.gameOver) return;\n\n      // 更新玩家\n      this.player.handleInput(this.keys);\n      this.player.update(deltaTime);\n\n      // 更新敌人\n      for (var i = this.enemies.length - 1; i >= 0; i--) {\n        var enemy = this.enemies[i];\n        enemy.update(deltaTime);\n\n        // 如果敌人死亡且死亡动画播放完毕，移除敌人\n        if (enemy.isDying && Date.now() - enemy.deathStartTime > 500) {\n          this.enemies.splice(i, 1);\n          continue;\n        }\n      }\n\n      // 更新投射物\n      for (var _i = this.projectiles.length - 1; _i >= 0; _i--) {\n        var projectile = this.projectiles[_i];\n        projectile.update(deltaTime);\n\n        // 检查投射物碰撞\n        var _iterator2 = _createForOfIteratorHelper(this.enemies),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var _enemy = _step2.value;\n            if (projectile.checkCollision(_enemy)) {\n              _enemy.takeDamage(projectile.damage);\n              projectile.active = false;\n              break;\n            }\n          }\n\n          // 移除非活动的投射物\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n        if (!projectile.active) {\n          this.projectiles.splice(_i, 1);\n        }\n      }\n\n      // 移除死亡的敌人\n      this.enemies = this.enemies.filter(function (enemy) {\n        return enemy.health > 0;\n      });\n\n      // 更新相机位置\n      this.updateCamera();\n\n      // 生成新敌人\n      this.enemySpawnTimer += deltaTime;\n      if (this.enemySpawnTimer >= this.enemySpawnInterval) {\n        this.spawnEnemy();\n        this.enemySpawnTimer = 0;\n      }\n    }\n  }, {\n    key: \"drawBackground\",\n    value: function drawBackground() {\n      // 创建渐变背景\n      var gradient = this.ctx.createLinearGradient(this.camera.x, 0, this.camera.x, this.canvas.height);\n      gradient.addColorStop(0, '#87CEEB'); // 天空蓝\n      gradient.addColorStop(1, '#B0E0E6'); // 粉蓝色\n\n      this.ctx.fillStyle = gradient;\n      this.ctx.fillRect(this.camera.x, 0, this.canvas.width, this.canvas.height);\n    }\n  }, {\n    key: \"drawTile\",\n    value: function drawTile(tile) {\n      this.ctx.fillStyle = tile.type === 'ground' ? '#8B4513' : tile.type === 'platform' ? '#A0522D' : '#6B8E23';\n      this.ctx.fillRect(tile.x, tile.y, this.tileSize, this.tileSize);\n\n      // 添加简单的阴影效果\n      if (tile.solid) {\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.2)';\n        this.ctx.fillRect(tile.x, tile.y, this.tileSize, 2);\n      }\n    }\n  }, {\n    key: \"updateCamera\",\n    value: function updateCamera() {\n      // 目标是将玩家保持在屏幕中心\n      var targetX = this.player.x - this.canvas.width / 2;\n\n      // 平滑过渡到目标位置\n      this.camera.x += (targetX - this.camera.x) * 0.1;\n\n      // 确保摄像机不会出现在负坐标\n      this.camera.x = Math.max(0, this.camera.x);\n    }\n  }, {\n    key: \"checkCollision\",\n    value: function checkCollision(entity) {\n      var result = {\n        horizontal: false,\n        vertical: false\n      };\n\n      // 检查与地形的碰撞\n      var _iterator3 = _createForOfIteratorHelper(this.terrain),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var terrain = _step3.value;\n          if (!terrain.solid) continue;\n          var terrainBox = {\n            x: terrain.x,\n            y: terrain.y,\n            width: this.tileSize,\n            height: this.tileSize\n          };\n\n          // 检查水平碰撞\n          var nextHorizontalPos = {\n            x: entity.x + entity.velocityX,\n            y: entity.y,\n            width: entity.width,\n            height: entity.height\n          };\n          if (this.checkBoxCollision(nextHorizontalPos, terrainBox)) {\n            result.horizontal = true;\n          }\n\n          // 检查垂直碰撞\n          var nextVerticalPos = {\n            x: entity.x,\n            y: entity.y + entity.velocityY,\n            width: entity.width,\n            height: entity.height\n          };\n          if (this.checkBoxCollision(nextVerticalPos, terrainBox)) {\n            result.vertical = true;\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      return result;\n    }\n  }, {\n    key: \"updateTerrain\",\n    value: function updateTerrain() {\n      var _this3 = this;\n      // 根据玩家位置生成或移除地形\n      var screenLeft = this.camera.x - this.tileSize;\n      var screenRight = this.camera.x + this.canvas.width + this.tileSize;\n\n      // 移除屏幕外的地形\n      this.terrain = this.terrain.filter(function (tile) {\n        return tile.x >= screenLeft - _this3.canvas.width && tile.x <= screenRight + _this3.canvas.width;\n      });\n    }\n  }, {\n    key: \"drawTerrain\",\n    value: function drawTerrain() {\n      var screenLeft = this.camera.x;\n      var screenRight = this.camera.x + this.canvas.width;\n\n      // 添加简单的背景渐变\n      var gradient = this.ctx.createLinearGradient(0, 0, 0, this.canvas.height);\n      gradient.addColorStop(0, '#87CEEB'); // 天空蓝\n      gradient.addColorStop(1, '#4A90E2'); // 深蓝色\n      this.ctx.fillStyle = gradient;\n      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n      // 绘制远景云层\n      this.drawClouds();\n      var _iterator4 = _createForOfIteratorHelper(this.terrain),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var tile = _step4.value;\n          if (tile.x + this.tileSize >= screenLeft && tile.x <= screenRight) {\n            // 根据地形类型设置样式和绘制方法\n            switch (tile.type) {\n              case 'ground':\n                this.drawGroundTile(tile);\n                break;\n              case 'moving_platform':\n                this.drawMovingPlatform(tile);\n                break;\n              case 'destructible':\n                this.drawDestructibleBlock(tile);\n                break;\n              default:\n                if (tile.type.startsWith('decoration_')) {\n                  this.drawDecoration(tile);\n                } else if (tile.type.startsWith('hazard_')) {\n                  this.drawHazard(tile);\n                }\n            }\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"drawGroundTile\",\n    value: function drawGroundTile(tile) {\n      this.ctx.fillStyle = '#3D3D3D';\n      this.ctx.fillRect(tile.x - this.camera.x, tile.y - this.camera.y, this.tileSize, this.tileSize);\n\n      // 添加简单的纹理\n      this.ctx.strokeStyle = '#2D2D2D';\n      this.ctx.lineWidth = 1;\n      this.ctx.strokeRect(tile.x - this.camera.x, tile.y - this.camera.y, this.tileSize, this.tileSize);\n    }\n  }, {\n    key: \"drawMovingPlatform\",\n    value: function drawMovingPlatform(platform) {\n      // 绘制平台本体\n      this.ctx.fillStyle = '#4A90E2';\n      this.ctx.fillRect(platform.x - this.camera.x, platform.y - this.camera.y, platform.width * this.tileSize, this.tileSize);\n\n      // 添加平台光效\n      this.ctx.fillStyle = 'rgba(255, 255, 255, 0.3)';\n      this.ctx.fillRect(platform.x - this.camera.x, platform.y - this.camera.y, platform.width * this.tileSize, 2);\n    }\n  }, {\n    key: \"drawDestructibleBlock\",\n    value: function drawDestructibleBlock(block) {\n      // 根据血量改变颜色\n      var healthPercent = block.health / 100;\n      var red = Math.floor(255 * (1 - healthPercent));\n      var green = Math.floor(255 * healthPercent);\n      this.ctx.fillStyle = \"rgb(\".concat(red, \", \").concat(green, \", 0)\");\n      this.ctx.fillRect(block.x - this.camera.x, block.y - this.camera.y, this.tileSize, this.tileSize);\n\n      // 添加裂纹效果\n      if (healthPercent < 0.5) {\n        this.ctx.strokeStyle = '#000';\n        this.ctx.lineWidth = 1;\n        var crackCount = Math.floor((1 - healthPercent) * 5);\n        for (var i = 0; i < crackCount; i++) {\n          this.ctx.beginPath();\n          this.ctx.moveTo(block.x - this.camera.x + Math.random() * this.tileSize, block.y - this.camera.y);\n          this.ctx.lineTo(block.x - this.camera.x + Math.random() * this.tileSize, block.y - this.camera.y + this.tileSize);\n          this.ctx.stroke();\n        }\n      }\n    }\n  }, {\n    key: \"drawDecoration\",\n    value: function drawDecoration(decoration) {\n      this.ctx.fillStyle = decoration.color;\n      this.ctx.fillRect(decoration.x - this.camera.x, decoration.y - this.camera.y, decoration.width * this.tileSize, decoration.height * this.tileSize);\n    }\n  }, {\n    key: \"drawHazard\",\n    value: function drawHazard(hazard) {\n      this.ctx.fillStyle = hazard.color;\n      if (hazard.type === 'hazard_spike') {\n        // 绘制尖刺\n        this.ctx.beginPath();\n        this.ctx.moveTo(hazard.x - this.camera.x, hazard.y - this.camera.y + this.tileSize);\n        this.ctx.lineTo(hazard.x - this.camera.x + this.tileSize / 2, hazard.y - this.camera.y);\n        this.ctx.lineTo(hazard.x - this.camera.x + this.tileSize, hazard.y - this.camera.y + this.tileSize);\n        this.ctx.fill();\n      } else {\n        this.ctx.fillRect(hazard.x - this.camera.x, hazard.y - this.camera.y, this.tileSize, this.tileSize);\n      }\n    }\n  }, {\n    key: \"drawClouds\",\n    value: function drawClouds() {\n      var cloudCount = 5;\n      var time = performance.now() * 0.0001;\n      this.ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\n      for (var i = 0; i < cloudCount; i++) {\n        var x = (this.camera.x * 0.5 + i * 200 + time * 50) % (this.canvas.width * 2) - 100;\n        var y = 50 + Math.sin(time + i) * 20;\n\n        // 绘制云朵\n        this.ctx.beginPath();\n        this.ctx.arc(x, y, 30, 0, Math.PI * 2);\n        this.ctx.arc(x + 25, y - 10, 25, 0, Math.PI * 2);\n        this.ctx.arc(x + 25, y + 10, 25, 0, Math.PI * 2);\n        this.ctx.arc(x + 50, y, 30, 0, Math.PI * 2);\n        this.ctx.fill();\n      }\n    }\n  }, {\n    key: \"updateEnemies\",\n    value: function updateEnemies(deltaTime) {\n      for (var i = this.enemies.length - 1; i >= 0; i--) {\n        var enemy = this.enemies[i];\n        enemy.update(deltaTime, this.player, this.checkCollision.bind(this));\n\n        // 移除死亡的敌人\n        if (enemy.isDead) {\n          this.enemies.splice(i, 1);\n        }\n      }\n    }\n  }, {\n    key: \"drawEnemies\",\n    value: function drawEnemies() {\n      var _iterator5 = _createForOfIteratorHelper(this.enemies),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var enemy = _step5.value;\n          enemy.draw(this.ctx, this.camera);\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n  }, {\n    key: \"updateProjectiles\",\n    value: function updateProjectiles(deltaTime) {\n      for (var i = this.projectiles.length - 1; i >= 0; i--) {\n        var projectile = this.projectiles[i];\n        if (!projectile.update(deltaTime)) {\n          this.projectiles.splice(i, 1);\n        }\n      }\n    }\n  }, {\n    key: \"drawProjectiles\",\n    value: function drawProjectiles() {\n      var _iterator6 = _createForOfIteratorHelper(this.projectiles),\n        _step6;\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var projectile = _step6.value;\n          projectile.draw(this.ctx, this.camera);\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n    }\n  }, {\n    key: \"checkCollisions\",\n    value: function checkCollisions() {\n      // 检查敌人与玩家的碰撞\n      var _iterator7 = _createForOfIteratorHelper(this.enemies),\n        _step7;\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var _enemy2 = _step7.value;\n          if (this.checkCollision(_enemy2).horizontal || this.checkCollision(_enemy2).vertical) {\n            this.player.takeDamage(_enemy2.damage);\n          }\n        }\n\n        // 检查投射物与敌人的碰撞\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n      for (var i = this.projectiles.length - 1; i >= 0; i--) {\n        var projectile = this.projectiles[i];\n        for (var j = this.enemies.length - 1; j >= 0; j--) {\n          var enemy = this.enemies[j];\n          if (this.checkCollision(projectile).horizontal || this.checkCollision(projectile).vertical) {\n            enemy.takeDamage(projectile.damage);\n            this.projectiles.splice(i, 1);\n            break;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"checkBoxCollision\",\n    value: function checkBoxCollision(rect1, rect2) {\n      return !(rect1.x + rect1.width <= rect2.x || rect1.x >= rect2.x + rect2.width || rect1.y + rect1.height <= rect2.y || rect1.y >= rect2.y + rect2.height);\n    }\n  }, {\n    key: \"isCollision\",\n    value: function isCollision(x, y) {\n      var tileX = Math.floor(x / this.tileSize);\n      var tileY = Math.floor(y / this.tileSize);\n\n      // 检查是否与任何地形块碰撞\n      var _iterator8 = _createForOfIteratorHelper(this.terrain),\n        _step8;\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var tile = _step8.value;\n          if (!tile.solid) continue;\n          var tilePosX = Math.floor(tile.x / this.tileSize);\n          var tilePosY = Math.floor(tile.y / this.tileSize);\n          if (tilePosX === tileX && tilePosY === tileY) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n      return false;\n    }\n  }, {\n    key: \"updateGameState\",\n    value: function updateGameState() {\n      // 检查游戏结束条件\n      if (this.player.health <= 0) {\n        this.gameState.gameOver = true;\n      }\n    }\n  }, {\n    key: \"drawDebugInfo\",\n    value: function drawDebugInfo() {\n      this.ctx.fillStyle = '#fff';\n      this.ctx.font = '14px Arial';\n      this.ctx.fillText(\"FPS: \".concat(Math.round(1000 / this.lastFrameTime)), 20, 20);\n      this.ctx.fillText(\"Player: (\".concat(Math.round(this.player.x), \", \").concat(Math.round(this.player.y), \")\"), 20, 40);\n      this.ctx.fillText(\"Health: \".concat(this.player.health), 20, 60);\n      this.ctx.fillText(\"Score: \".concat(this.gameState.score), 20, 80);\n      this.ctx.fillText(\"Enemies: \".concat(this.enemies.length), 20, 100);\n      this.ctx.fillText(\"Projectiles: \".concat(this.projectiles.length), 20, 120);\n      this.ctx.fillText(\"Camera: (\".concat(Math.round(this.camera.x), \", \").concat(Math.round(this.camera.y), \")\"), 20, 140);\n    }\n  }, {\n    key: \"drawGameOver\",\n    value: function drawGameOver() {\n      this.ctx.fillStyle = '#fff';\n      this.ctx.font = '24px Arial';\n      this.ctx.textAlign = 'center';\n      this.ctx.textBaseline = 'middle';\n      this.ctx.fillText('Game Over', this.canvas.width / 2, this.canvas.height / 2);\n    }\n  }, {\n    key: \"drawPauseScreen\",\n    value: function drawPauseScreen() {\n      this.ctx.fillStyle = '#fff';\n      this.ctx.font = '24px Arial';\n      this.ctx.textAlign = 'center';\n      this.ctx.textBaseline = 'middle';\n      this.ctx.fillText('Paused', this.canvas.width / 2, this.canvas.height / 2);\n    }\n  }, {\n    key: \"generateInitialTerrain\",\n    value: function generateInitialTerrain() {\n      var _this4 = this;\n      var groundLevel = this.canvas.height - 100;\n      var worldWidth = this.canvas.width * 3;\n      var segmentSize = 10; // 地形分段大小\n\n      // 生成地形高度数组\n      var heightMap = [];\n      for (var x = 0; x <= worldWidth / this.tileSize; x++) {\n        // 使用多个正弦波叠加生成自然的地形\n        var height = Math.sin(x * 0.1) * 30 +\n        // 主要地形起伏\n        Math.sin(x * 0.05) * 50 +\n        // 大型地形特征\n        Math.sin(x * 0.02) * 20 +\n        // 微小变化\n        Math.sin(x * 0.2) * 10; // 细节纹理\n\n        heightMap[x] = groundLevel + height;\n      }\n\n      // 平滑地形高度\n      for (var i = 1; i < heightMap.length - 1; i++) {\n        heightMap[i] = (heightMap[i - 1] + heightMap[i] * 2 + heightMap[i + 1]) / 4;\n      }\n\n      // 生成地形块\n      for (var _x = 0; _x < worldWidth / this.tileSize; _x++) {\n        var terrainHeight = Math.floor(heightMap[_x] / this.tileSize) * this.tileSize;\n\n        // 从地形表面一直填充到画布底部\n        for (var y = terrainHeight; y < this.canvas.height + this.tileSize; y += this.tileSize) {\n          this.terrain.push({\n            x: _x * this.tileSize,\n            y: y,\n            type: 'ground',\n            solid: true\n          });\n        }\n\n        // 在适当的位置添加平台\n        if (_x % segmentSize === 0 && Math.random() < 0.3) {\n          var platformWidth = Math.floor(Math.random() * 3) + 2;\n          var platformHeight = terrainHeight - (Math.floor(Math.random() * 3) + 2) * this.tileSize;\n\n          // 确保平台不会太高或太低\n          if (platformHeight > groundLevel - 200 && platformHeight < terrainHeight - this.tileSize) {\n            for (var px = 0; px < platformWidth; px++) {\n              if (_x + px < worldWidth / this.tileSize) {\n                this.terrain.push({\n                  x: (_x + px) * this.tileSize,\n                  y: platformHeight,\n                  type: 'platform',\n                  solid: true\n                });\n              }\n            }\n          }\n        }\n\n        // 添加装饰物\n        if (Math.random() < 0.1) {\n          var decorHeight = terrainHeight - this.tileSize;\n          if (decorHeight > groundLevel - 150) {\n            this.terrain.push({\n              x: _x * this.tileSize,\n              y: decorHeight,\n              type: 'decoration',\n              solid: false\n            });\n          }\n        }\n      }\n\n      // 确保起始区域是平坦的\n      var startX = Math.floor(this.player.x / this.tileSize);\n      var safeZoneWidth = 5;\n      var _loop = function _loop(_x2) {\n        if (_x2 >= 0 && _x2 < worldWidth / _this4.tileSize) {\n          // 移除这个区域的所有地形\n          _this4.terrain = _this4.terrain.filter(function (tile) {\n            return tile.x < _x2 * _this4.tileSize || tile.x >= (_x2 + 1) * _this4.tileSize;\n          });\n\n          // 添加平坦的地形\n          for (var _y = groundLevel; _y < _this4.canvas.height + _this4.tileSize; _y += _this4.tileSize) {\n            _this4.terrain.push({\n              x: _x2 * _this4.tileSize,\n              y: _y,\n              type: 'ground',\n              solid: true\n            });\n          }\n        }\n      };\n      for (var _x2 = startX - safeZoneWidth; _x2 <= startX + safeZoneWidth; _x2++) {\n        _loop(_x2);\n      }\n    }\n  }, {\n    key: \"generateNewTerrain\",\n    value: function generateNewTerrain(startX, endX) {\n      var groundLevel = this.canvas.height - 100;\n      var segmentSize = 10;\n\n      // 生成新的高度图\n      var heightMap = [];\n      for (var x = startX; x <= endX; x += this.tileSize) {\n        var xCoord = x / this.tileSize;\n        var height = Math.sin(xCoord * 0.1) * 30 + Math.sin(xCoord * 0.05) * 50 + Math.sin(xCoord * 0.02) * 20 + Math.sin(xCoord * 0.2) * 10;\n        heightMap[xCoord] = groundLevel + height;\n      }\n\n      // 生成地形\n      for (var _x3 = startX; _x3 < endX; _x3 += this.tileSize) {\n        var _xCoord = _x3 / this.tileSize;\n        var terrainHeight = Math.floor(heightMap[_xCoord] / this.tileSize) * this.tileSize;\n\n        // 生成地面\n        for (var y = terrainHeight; y < this.canvas.height + this.tileSize; y += this.tileSize) {\n          this.terrain.push({\n            x: _x3,\n            y: y,\n            type: 'ground',\n            solid: true\n          });\n        }\n\n        // 生成平台\n        if (_xCoord % segmentSize === 0 && Math.random() < 0.3) {\n          var platformWidth = Math.floor(Math.random() * 3) + 2;\n          var platformHeight = terrainHeight - (Math.floor(Math.random() * 3) + 2) * this.tileSize;\n          if (platformHeight > groundLevel - 200 && platformHeight < terrainHeight - this.tileSize) {\n            for (var px = 0; px < platformWidth; px++) {\n              var platformX = _x3 + px * this.tileSize;\n              if (platformX < endX) {\n                this.terrain.push({\n                  x: platformX,\n                  y: platformHeight,\n                  type: 'platform',\n                  solid: true\n                });\n              }\n            }\n          }\n        }\n\n        // 生成装饰物\n        if (Math.random() < 0.1) {\n          var decorHeight = terrainHeight - this.tileSize;\n          if (decorHeight > groundLevel - 150) {\n            this.terrain.push({\n              x: _x3,\n              y: decorHeight,\n              type: 'decoration',\n              solid: false\n            });\n          }\n        }\n      }\n\n      // 在新生成的区域添加敌人\n      this.spawnEnemiesInRange(startX, endX);\n    }\n  }, {\n    key: \"spawnEnemiesInRange\",\n    value: function spawnEnemiesInRange(startX, endX) {\n      var enemyCount = Math.floor((endX - startX) / (this.canvas.width / 3));\n      for (var i = 0; i < enemyCount; i++) {\n        var x = startX + Math.random() * (endX - startX);\n        var y = this.canvas.height / 2;\n\n        // 创建基础敌人\n        var enemy = new Enemy(x, y, this);\n        enemy.velocityX = Math.random() * 2 - 1; // 随机速度\n        this.enemies.push(enemy);\n      }\n    }\n  }, {\n    key: \"cleanupOffscreenEntities\",\n    value: function cleanupOffscreenEntities() {\n      var _this5 = this;\n      var bufferZone = this.canvas.width * 2;\n\n      // 清理地形\n      this.terrain = this.terrain.filter(function (tile) {\n        return tile.x >= _this5.camera.x - bufferZone && tile.x <= _this5.camera.x + _this5.canvas.width + bufferZone;\n      });\n\n      // 清理敌人\n      this.enemies = this.enemies.filter(function (enemy) {\n        return enemy.x >= _this5.camera.x - bufferZone && enemy.x <= _this5.camera.x + _this5.canvas.width + bufferZone;\n      });\n    }\n  }]);\n}(); // 当页面加载完成后启动游戏\nwindow.addEventListener('load', function () {\n  var canvas = document.getElementById('gameCanvas');\n  var game = new Game(canvas);\n});","map":{"version":3,"names":["Game","canvas","_classCallCheck","setupCanvas","ctx","getContext","width","height","tileSize","gameState","score","level","gameOver","paused","player","Player","enemies","projectiles","maxEnemies","enemySpawnTimer","enemySpawnInterval","lastEnemySpawnTime","terrain","camera","x","y","keys","setupInputHandlers","debug","generateInitialTerrain","lastTime","lastFrameTime","requestAnimationFrame","gameLoop","bind","generatedTerrainStart","generatedTerrainEnd","_createClass","key","value","_this","window","addEventListener","e","preventDefault","spawnEnemy","currentTime","performance","now","length","spawnDistance","spawnX","Math","random","groundY","_iterator","_createForOfIteratorHelper","_step","s","n","done","tile","solid","err","f","enemy","Enemy","push","timestamp","_this2","deltaTime","update","clearRect","save","translate","drawBackground","forEach","drawTile","draw","projectile","restore","handleInput","i","isDying","Date","deathStartTime","splice","_iterator2","_step2","checkCollision","takeDamage","damage","active","filter","health","updateCamera","gradient","createLinearGradient","addColorStop","fillStyle","fillRect","type","targetX","max","entity","result","horizontal","vertical","_iterator3","_step3","terrainBox","nextHorizontalPos","velocityX","checkBoxCollision","nextVerticalPos","velocityY","updateTerrain","_this3","screenLeft","screenRight","drawTerrain","drawClouds","_iterator4","_step4","drawGroundTile","drawMovingPlatform","drawDestructibleBlock","startsWith","drawDecoration","drawHazard","strokeStyle","lineWidth","strokeRect","platform","block","healthPercent","red","floor","green","concat","crackCount","beginPath","moveTo","lineTo","stroke","decoration","color","hazard","fill","cloudCount","time","sin","arc","PI","updateEnemies","isDead","drawEnemies","_iterator5","_step5","updateProjectiles","drawProjectiles","_iterator6","_step6","checkCollisions","_iterator7","_step7","j","rect1","rect2","isCollision","tileX","tileY","_iterator8","_step8","tilePosX","tilePosY","updateGameState","drawDebugInfo","font","fillText","round","drawGameOver","textAlign","textBaseline","drawPauseScreen","_this4","groundLevel","worldWidth","segmentSize","heightMap","terrainHeight","platformWidth","platformHeight","px","decorHeight","startX","safeZoneWidth","_loop","_x2","generateNewTerrain","endX","xCoord","platformX","spawnEnemiesInRange","enemyCount","cleanupOffscreenEntities","_this5","bufferZone","document","getElementById","game"],"sources":["D:/slj_doc/game_2/src/game/game.js"],"sourcesContent":["class Game {\n    constructor(canvas) {\n        this.canvas = canvas;\n        this.setupCanvas();\n        this.ctx = canvas.getContext('2d');\n        this.width = canvas.width;\n        this.height = canvas.height;\n        this.tileSize = 32;\n\n        // 游戏状态\n        this.gameState = {\n            score: 0,\n            level: 1,\n            gameOver: false,\n            paused: false\n        };\n\n        // 初始化玩家\n        this.player = new Player(100, 100, this);\n        \n        // 初始化敌人系统\n        this.enemies = [];\n        this.projectiles = [];\n        this.maxEnemies = 5;  // 减少最大敌人数量\n        this.enemySpawnTimer = 0;\n        this.enemySpawnInterval = 5000;  // 增加敌人生成间隔到5秒\n        this.lastEnemySpawnTime = 0;  // 记录上次生成敌人的时间\n        \n        // 初始化地形\n        this.terrain = [];\n        \n        // 相机系统\n        this.camera = {\n            x: 0,\n            y: 0,\n            width: canvas.width,\n            height: canvas.height\n        };\n\n        // 输入处理\n        this.keys = {};\n        this.setupInputHandlers();\n        \n        // 调试模式\n        this.debug = false;\n        \n        // 生成初始地形\n        this.generateInitialTerrain();\n        \n        // 开始游戏循环\n        this.lastTime = 0;\n        this.lastFrameTime = 0;\n        requestAnimationFrame(this.gameLoop.bind(this));\n        \n        // 新增：跟踪已生成的地形范围\n        this.generatedTerrainStart = 0;\n        this.generatedTerrainEnd = this.canvas.width * 3;\n    }\n\n    setupCanvas() {\n        this.canvas.width = 800;\n        this.canvas.height = 600;\n    }\n\n    setupInputHandlers() {\n        window.addEventListener('keydown', (e) => {\n            // 防止空格键滚动页面\n            if (e.key === ' ') {\n                e.preventDefault();\n            }\n            this.keys[e.key] = true;\n        });\n\n        window.addEventListener('keyup', (e) => {\n            this.keys[e.key] = false;\n        });\n\n        // 禁用右键菜单\n        this.canvas.addEventListener('contextmenu', (e) => {\n            e.preventDefault();\n        });\n    }\n\n    spawnEnemy() {\n        const currentTime = performance.now();\n        if (currentTime - this.lastEnemySpawnTime < this.enemySpawnInterval) {\n            return;\n        }\n\n        if (this.enemies.length >= this.maxEnemies) {\n            return;\n        }\n\n        // 在玩家视野范围外，但不要太远的地方生成敌人\n        const spawnDistance = this.canvas.width + 100; // 比屏幕宽度多一点\n        const spawnX = this.player.x + (Math.random() > 0.5 ? spawnDistance : -spawnDistance);\n\n        // 找到生成点的地面高度\n        let groundY = this.canvas.height;\n        for (const tile of this.terrain) {\n            if (!tile.solid) continue;\n\n            if (tile.x <= spawnX && \n                tile.x + this.tileSize > spawnX && \n                tile.y < groundY) {\n                groundY = tile.y;\n            }\n        }\n\n        // 在地面上方生成敌人\n        if (groundY < this.canvas.height) {\n            const enemy = new Enemy(spawnX, groundY - this.tileSize, this);\n            this.enemies.push(enemy);\n            this.lastEnemySpawnTime = currentTime;\n        }\n    }\n\n    gameLoop(timestamp) {\n        // 计算时间增量\n        const deltaTime = timestamp - this.lastTime;\n        this.lastTime = timestamp;\n\n        // 更新游戏状态\n        this.update(deltaTime);\n        \n        // 清空画布\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        \n        // 保存当前上下文状态\n        this.ctx.save();\n        \n        // 应用摄像机变换\n        this.ctx.translate(-this.camera.x, -this.camera.y);\n        \n        // 绘制背景\n        this.drawBackground();\n        \n        // 绘制地形\n        this.terrain.forEach(tile => {\n            if (tile.x >= this.camera.x - this.tileSize && \n                tile.x <= this.camera.x + this.canvas.width + this.tileSize) {\n                this.drawTile(tile);\n            }\n        });\n\n        // 绘制玩家\n        if (this.player) {\n            this.player.draw(this.ctx);\n        }\n        \n        // 绘制敌人\n        this.enemies.forEach(enemy => {\n            if (enemy.x >= this.camera.x - this.tileSize && \n                enemy.x <= this.camera.x + this.canvas.width + this.tileSize) {\n                enemy.draw(this.ctx);\n            }\n        });\n        \n        // 绘制投射物\n        this.projectiles.forEach(projectile => {\n            if (projectile.x >= this.camera.x - this.tileSize && \n                projectile.x <= this.camera.x + this.canvas.width + this.tileSize) {\n                projectile.draw(this.ctx);\n            }\n        });\n        \n        // 恢复上下文状态\n        this.ctx.restore();\n\n        // 继续游戏循环\n        requestAnimationFrame(this.gameLoop.bind(this));\n    }\n\n    update(deltaTime) {\n        if (this.gameOver) return;\n\n        // 更新玩家\n        this.player.handleInput(this.keys);\n        this.player.update(deltaTime);\n\n        // 更新敌人\n        for (let i = this.enemies.length - 1; i >= 0; i--) {\n            const enemy = this.enemies[i];\n            enemy.update(deltaTime);\n            \n            // 如果敌人死亡且死亡动画播放完毕，移除敌人\n            if (enemy.isDying && Date.now() - enemy.deathStartTime > 500) {\n                this.enemies.splice(i, 1);\n                continue;\n            }\n        }\n\n        // 更新投射物\n        for (let i = this.projectiles.length - 1; i >= 0; i--) {\n            const projectile = this.projectiles[i];\n            projectile.update(deltaTime);\n\n            // 检查投射物碰撞\n            for (const enemy of this.enemies) {\n                if (projectile.checkCollision(enemy)) {\n                    enemy.takeDamage(projectile.damage);\n                    projectile.active = false;\n                    break;\n                }\n            }\n\n            // 移除非活动的投射物\n            if (!projectile.active) {\n                this.projectiles.splice(i, 1);\n            }\n        }\n\n        // 移除死亡的敌人\n        this.enemies = this.enemies.filter(enemy => enemy.health > 0);\n\n        // 更新相机位置\n        this.updateCamera();\n\n        // 生成新敌人\n        this.enemySpawnTimer += deltaTime;\n        if (this.enemySpawnTimer >= this.enemySpawnInterval) {\n            this.spawnEnemy();\n            this.enemySpawnTimer = 0;\n        }\n    }\n\n    drawBackground() {\n        // 创建渐变背景\n        const gradient = this.ctx.createLinearGradient(\n            this.camera.x, \n            0, \n            this.camera.x, \n            this.canvas.height\n        );\n        gradient.addColorStop(0, '#87CEEB');  // 天空蓝\n        gradient.addColorStop(1, '#B0E0E6');  // 粉蓝色\n\n        this.ctx.fillStyle = gradient;\n        this.ctx.fillRect(\n            this.camera.x, \n            0, \n            this.canvas.width, \n            this.canvas.height\n        );\n    }\n\n    drawTile(tile) {\n        this.ctx.fillStyle = tile.type === 'ground' ? '#8B4513' : \n                            tile.type === 'platform' ? '#A0522D' : \n                            '#6B8E23';\n        this.ctx.fillRect(tile.x, tile.y, this.tileSize, this.tileSize);\n        \n        // 添加简单的阴影效果\n        if (tile.solid) {\n            this.ctx.fillStyle = 'rgba(0, 0, 0, 0.2)';\n            this.ctx.fillRect(tile.x, tile.y, this.tileSize, 2);\n        }\n    }\n\n    updateCamera() {\n        // 目标是将玩家保持在屏幕中心\n        const targetX = this.player.x - this.canvas.width / 2;\n        \n        // 平滑过渡到目标位置\n        this.camera.x += (targetX - this.camera.x) * 0.1;\n        \n        // 确保摄像机不会出现在负坐标\n        this.camera.x = Math.max(0, this.camera.x);\n    }\n\n    checkCollision(rect1, rect2) {\n        return rect1.x < rect2.x + rect2.width &&\n               rect1.x + rect1.width > rect2.x &&\n               rect1.y < rect2.y + rect2.height &&\n               rect1.y + rect1.height > rect2.y;\n    }\n\n    updateTerrain() {\n        // 根据玩家位置生成或移除地形\n        const screenLeft = this.camera.x - this.tileSize;\n        const screenRight = this.camera.x + this.canvas.width + this.tileSize;\n\n        // 移除屏幕外的地形\n        this.terrain = this.terrain.filter(tile => \n            tile.x >= screenLeft - this.canvas.width &&\n            tile.x <= screenRight + this.canvas.width\n        );\n    }\n\n    drawTerrain() {\n        const screenLeft = this.camera.x;\n        const screenRight = this.camera.x + this.canvas.width;\n\n        // 添加简单的背景渐变\n        const gradient = this.ctx.createLinearGradient(0, 0, 0, this.canvas.height);\n        gradient.addColorStop(0, '#87CEEB');  // 天空蓝\n        gradient.addColorStop(1, '#4A90E2');  // 深蓝色\n        this.ctx.fillStyle = gradient;\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n        // 绘制远景云层\n        this.drawClouds();\n\n        for (const tile of this.terrain) {\n            if (tile.x + this.tileSize >= screenLeft && tile.x <= screenRight) {\n                // 根据地形类型设置样式和绘制方法\n                switch(tile.type) {\n                    case 'ground':\n                        this.drawGroundTile(tile);\n                        break;\n                    case 'moving_platform':\n                        this.drawMovingPlatform(tile);\n                        break;\n                    case 'destructible':\n                        this.drawDestructibleBlock(tile);\n                        break;\n                    default:\n                        if (tile.type.startsWith('decoration_')) {\n                            this.drawDecoration(tile);\n                        } else if (tile.type.startsWith('hazard_')) {\n                            this.drawHazard(tile);\n                        }\n                }\n            }\n        }\n    }\n\n    drawGroundTile(tile) {\n        this.ctx.fillStyle = '#3D3D3D';\n        this.ctx.fillRect(\n            tile.x - this.camera.x,\n            tile.y - this.camera.y,\n            this.tileSize,\n            this.tileSize\n        );\n\n        // 添加简单的纹理\n        this.ctx.strokeStyle = '#2D2D2D';\n        this.ctx.lineWidth = 1;\n        this.ctx.strokeRect(\n            tile.x - this.camera.x,\n            tile.y - this.camera.y,\n            this.tileSize,\n            this.tileSize\n        );\n    }\n\n    drawMovingPlatform(platform) {\n        // 绘制平台本体\n        this.ctx.fillStyle = '#4A90E2';\n        this.ctx.fillRect(\n            platform.x - this.camera.x,\n            platform.y - this.camera.y,\n            platform.width * this.tileSize,\n            this.tileSize\n        );\n\n        // 添加平台光效\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.3)';\n        this.ctx.fillRect(\n            platform.x - this.camera.x,\n            platform.y - this.camera.y,\n            platform.width * this.tileSize,\n            2\n        );\n    }\n\n    drawDestructibleBlock(block) {\n        // 根据血量改变颜色\n        const healthPercent = block.health / 100;\n        const red = Math.floor(255 * (1 - healthPercent));\n        const green = Math.floor(255 * healthPercent);\n        this.ctx.fillStyle = `rgb(${red}, ${green}, 0)`;\n\n        this.ctx.fillRect(\n            block.x - this.camera.x,\n            block.y - this.camera.y,\n            this.tileSize,\n            this.tileSize\n        );\n\n        // 添加裂纹效果\n        if (healthPercent < 0.5) {\n            this.ctx.strokeStyle = '#000';\n            this.ctx.lineWidth = 1;\n            const crackCount = Math.floor((1 - healthPercent) * 5);\n            for (let i = 0; i < crackCount; i++) {\n                this.ctx.beginPath();\n                this.ctx.moveTo(\n                    block.x - this.camera.x + Math.random() * this.tileSize,\n                    block.y - this.camera.y\n                );\n                this.ctx.lineTo(\n                    block.x - this.camera.x + Math.random() * this.tileSize,\n                    block.y - this.camera.y + this.tileSize\n                );\n                this.ctx.stroke();\n            }\n        }\n    }\n\n    drawDecoration(decoration) {\n        this.ctx.fillStyle = decoration.color;\n        this.ctx.fillRect(\n            decoration.x - this.camera.x,\n            decoration.y - this.camera.y,\n            decoration.width * this.tileSize,\n            decoration.height * this.tileSize\n        );\n    }\n\n    drawHazard(hazard) {\n        this.ctx.fillStyle = hazard.color;\n        \n        if (hazard.type === 'hazard_spike') {\n            // 绘制尖刺\n            this.ctx.beginPath();\n            this.ctx.moveTo(\n                hazard.x - this.camera.x,\n                hazard.y - this.camera.y + this.tileSize\n            );\n            this.ctx.lineTo(\n                hazard.x - this.camera.x + this.tileSize / 2,\n                hazard.y - this.camera.y\n            );\n            this.ctx.lineTo(\n                hazard.x - this.camera.x + this.tileSize,\n                hazard.y - this.camera.y + this.tileSize\n            );\n            this.ctx.fill();\n        } else {\n            this.ctx.fillRect(\n                hazard.x - this.camera.x,\n                hazard.y - this.camera.y,\n                this.tileSize,\n                this.tileSize\n            );\n        }\n    }\n\n    drawClouds() {\n        const cloudCount = 5;\n        const time = performance.now() * 0.0001;\n        \n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\n        for (let i = 0; i < cloudCount; i++) {\n            const x = ((this.camera.x * 0.5 + i * 200 + time * 50) % (this.canvas.width * 2)) - 100;\n            const y = 50 + Math.sin(time + i) * 20;\n            \n            // 绘制云朵\n            this.ctx.beginPath();\n            this.ctx.arc(x, y, 30, 0, Math.PI * 2);\n            this.ctx.arc(x + 25, y - 10, 25, 0, Math.PI * 2);\n            this.ctx.arc(x + 25, y + 10, 25, 0, Math.PI * 2);\n            this.ctx.arc(x + 50, y, 30, 0, Math.PI * 2);\n            this.ctx.fill();\n        }\n    }\n\n    updateEnemies(deltaTime) {\n        for (let i = this.enemies.length - 1; i >= 0; i--) {\n            const enemy = this.enemies[i];\n            enemy.update(deltaTime, this.player, this.checkCollision.bind(this));\n            \n            // 移除死亡的敌人\n            if (enemy.isDead) {\n                this.enemies.splice(i, 1);\n            }\n        }\n    }\n\n    drawEnemies() {\n        for (const enemy of this.enemies) {\n            enemy.draw(this.ctx, this.camera);\n        }\n    }\n\n    updateProjectiles(deltaTime) {\n        for (let i = this.projectiles.length - 1; i >= 0; i--) {\n            const projectile = this.projectiles[i];\n            if (!projectile.update(deltaTime)) {\n                this.projectiles.splice(i, 1);\n            }\n        }\n    }\n\n    drawProjectiles() {\n        for (const projectile of this.projectiles) {\n            projectile.draw(this.ctx, this.camera);\n        }\n    }\n\n    checkCollisions() {\n        // 检查敌人与玩家的碰撞\n        for (const enemy of this.enemies) {\n            if (this.checkCollision(enemy).horizontal || this.checkCollision(enemy).vertical) {\n                this.player.takeDamage(enemy.damage);\n            }\n        }\n\n        // 检查投射物与敌人的碰撞\n        for (let i = this.projectiles.length - 1; i >= 0; i--) {\n            const projectile = this.projectiles[i];\n            for (let j = this.enemies.length - 1; j >= 0; j--) {\n                const enemy = this.enemies[j];\n                if (this.checkCollision(projectile).horizontal || this.checkCollision(projectile).vertical) {\n                    enemy.takeDamage(projectile.damage);\n                    this.projectiles.splice(i, 1);\n                    break;\n                }\n            }\n        }\n    }\n\n    checkCollision(entity) {\n        const result = {\n            horizontal: false,\n            vertical: false\n        };\n\n        // 检查与地形的碰撞\n        for (const terrain of this.terrain) {\n            if (!terrain.solid) continue;\n\n            const terrainBox = {\n                x: terrain.x,\n                y: terrain.y,\n                width: this.tileSize,\n                height: this.tileSize\n            };\n\n            // 检查水平碰撞\n            const nextHorizontalPos = {\n                x: entity.x + entity.velocityX,\n                y: entity.y,\n                width: entity.width,\n                height: entity.height\n            };\n\n            if (this.checkBoxCollision(nextHorizontalPos, terrainBox)) {\n                result.horizontal = true;\n            }\n\n            // 检查垂直碰撞\n            const nextVerticalPos = {\n                x: entity.x,\n                y: entity.y + entity.velocityY,\n                width: entity.width,\n                height: entity.height\n            };\n\n            if (this.checkBoxCollision(nextVerticalPos, terrainBox)) {\n                result.vertical = true;\n            }\n        }\n\n        return result;\n    }\n\n    checkBoxCollision(rect1, rect2) {\n        return !(rect1.x + rect1.width <= rect2.x ||\n                rect1.x >= rect2.x + rect2.width ||\n                rect1.y + rect1.height <= rect2.y ||\n                rect1.y >= rect2.y + rect2.height);\n    }\n\n    isCollision(x, y) {\n        const tileX = Math.floor(x / this.tileSize);\n        const tileY = Math.floor(y / this.tileSize);\n        \n        // 检查是否与任何地形块碰撞\n        for (const tile of this.terrain) {\n            if (!tile.solid) continue;\n\n            const tilePosX = Math.floor(tile.x / this.tileSize);\n            const tilePosY = Math.floor(tile.y / this.tileSize);\n            \n            if (tilePosX === tileX && tilePosY === tileY) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n\n    updateGameState() {\n        // 检查游戏结束条件\n        if (this.player.health <= 0) {\n            this.gameState.gameOver = true;\n        }\n    }\n\n    drawDebugInfo() {\n        this.ctx.fillStyle = '#fff';\n        this.ctx.font = '14px Arial';\n        this.ctx.fillText(`FPS: ${Math.round(1000/this.lastFrameTime)}`, 20, 20);\n        this.ctx.fillText(`Player: (${Math.round(this.player.x)}, ${Math.round(this.player.y)})`, 20, 40);\n        this.ctx.fillText(`Health: ${this.player.health}`, 20, 60);\n        this.ctx.fillText(`Score: ${this.gameState.score}`, 20, 80);\n        this.ctx.fillText(`Enemies: ${this.enemies.length}`, 20, 100);\n        this.ctx.fillText(`Projectiles: ${this.projectiles.length}`, 20, 120);\n        this.ctx.fillText(`Camera: (${Math.round(this.camera.x)}, ${Math.round(this.camera.y)})`, 20, 140);\n    }\n\n    drawGameOver() {\n        this.ctx.fillStyle = '#fff';\n        this.ctx.font = '24px Arial';\n        this.ctx.textAlign = 'center';\n        this.ctx.textBaseline = 'middle';\n        this.ctx.fillText('Game Over', this.canvas.width / 2, this.canvas.height / 2);\n    }\n\n    drawPauseScreen() {\n        this.ctx.fillStyle = '#fff';\n        this.ctx.font = '24px Arial';\n        this.ctx.textAlign = 'center';\n        this.ctx.textBaseline = 'middle';\n        this.ctx.fillText('Paused', this.canvas.width / 2, this.canvas.height / 2);\n    }\n\n    generateInitialTerrain() {\n        const groundLevel = this.canvas.height - 100;\n        const worldWidth = this.canvas.width * 3;\n        const segmentSize = 10; // 地形分段大小\n\n        // 生成地形高度数组\n        const heightMap = [];\n        for (let x = 0; x <= worldWidth / this.tileSize; x++) {\n            // 使用多个正弦波叠加生成自然的地形\n            const height = \n                Math.sin(x * 0.1) * 30 +      // 主要地形起伏\n                Math.sin(x * 0.05) * 50 +     // 大型地形特征\n                Math.sin(x * 0.02) * 20 +     // 微小变化\n                Math.sin(x * 0.2) * 10;       // 细节纹理\n            \n            heightMap[x] = groundLevel + height;\n        }\n\n        // 平滑地形高度\n        for (let i = 1; i < heightMap.length - 1; i++) {\n            heightMap[i] = (heightMap[i-1] + heightMap[i] * 2 + heightMap[i+1]) / 4;\n        }\n\n        // 生成地形块\n        for (let x = 0; x < worldWidth / this.tileSize; x++) {\n            const terrainHeight = Math.floor(heightMap[x] / this.tileSize) * this.tileSize;\n\n            // 从地形表面一直填充到画布底部\n            for (let y = terrainHeight; y < this.canvas.height + this.tileSize; y += this.tileSize) {\n                this.terrain.push({\n                    x: x * this.tileSize,\n                    y: y,\n                    type: 'ground',\n                    solid: true\n                });\n            }\n\n            // 在适当的位置添加平台\n            if (x % segmentSize === 0 && Math.random() < 0.3) {\n                const platformWidth = Math.floor(Math.random() * 3) + 2;\n                const platformHeight = terrainHeight - (Math.floor(Math.random() * 3) + 2) * this.tileSize;\n\n                // 确保平台不会太高或太低\n                if (platformHeight > groundLevel - 200 && platformHeight < terrainHeight - this.tileSize) {\n                    for (let px = 0; px < platformWidth; px++) {\n                        if (x + px < worldWidth / this.tileSize) {\n                            this.terrain.push({\n                                x: (x + px) * this.tileSize,\n                                y: platformHeight,\n                                type: 'platform',\n                                solid: true\n                            });\n                        }\n                    }\n                }\n            }\n\n            // 添加装饰物\n            if (Math.random() < 0.1) {\n                const decorHeight = terrainHeight - this.tileSize;\n                if (decorHeight > groundLevel - 150) {\n                    this.terrain.push({\n                        x: x * this.tileSize,\n                        y: decorHeight,\n                        type: 'decoration',\n                        solid: false\n                    });\n                }\n            }\n        }\n\n        // 确保起始区域是平坦的\n        const startX = Math.floor(this.player.x / this.tileSize);\n        const safeZoneWidth = 5;\n        for (let x = startX - safeZoneWidth; x <= startX + safeZoneWidth; x++) {\n            if (x >= 0 && x < worldWidth / this.tileSize) {\n                // 移除这个区域的所有地形\n                this.terrain = this.terrain.filter(tile => \n                    tile.x < x * this.tileSize || \n                    tile.x >= (x + 1) * this.tileSize\n                );\n\n                // 添加平坦的地形\n                for (let y = groundLevel; y < this.canvas.height + this.tileSize; y += this.tileSize) {\n                    this.terrain.push({\n                        x: x * this.tileSize,\n                        y: y,\n                        type: 'ground',\n                        solid: true\n                    });\n                }\n            }\n        }\n    }\n\n    generateNewTerrain(startX, endX) {\n        const groundLevel = this.canvas.height - 100;\n        const segmentSize = 10;\n\n        // 生成新的高度图\n        const heightMap = [];\n        for (let x = startX; x <= endX; x += this.tileSize) {\n            const xCoord = x / this.tileSize;\n            const height = \n                Math.sin(xCoord * 0.1) * 30 +\n                Math.sin(xCoord * 0.05) * 50 +\n                Math.sin(xCoord * 0.02) * 20 +\n                Math.sin(xCoord * 0.2) * 10;\n            \n            heightMap[xCoord] = groundLevel + height;\n        }\n\n        // 生成地形\n        for (let x = startX; x < endX; x += this.tileSize) {\n            const xCoord = x / this.tileSize;\n            const terrainHeight = Math.floor(heightMap[xCoord] / this.tileSize) * this.tileSize;\n\n            // 生成地面\n            for (let y = terrainHeight; y < this.canvas.height + this.tileSize; y += this.tileSize) {\n                this.terrain.push({\n                    x: x,\n                    y: y,\n                    type: 'ground',\n                    solid: true\n                });\n            }\n\n            // 生成平台\n            if (xCoord % segmentSize === 0 && Math.random() < 0.3) {\n                const platformWidth = Math.floor(Math.random() * 3) + 2;\n                const platformHeight = terrainHeight - (Math.floor(Math.random() * 3) + 2) * this.tileSize;\n\n                if (platformHeight > groundLevel - 200 && platformHeight < terrainHeight - this.tileSize) {\n                    for (let px = 0; px < platformWidth; px++) {\n                        const platformX = x + px * this.tileSize;\n                        if (platformX < endX) {\n                            this.terrain.push({\n                                x: platformX,\n                                y: platformHeight,\n                                type: 'platform',\n                                solid: true\n                            });\n                        }\n                    }\n                }\n            }\n\n            // 生成装饰物\n            if (Math.random() < 0.1) {\n                const decorHeight = terrainHeight - this.tileSize;\n                if (decorHeight > groundLevel - 150) {\n                    this.terrain.push({\n                        x: x,\n                        y: decorHeight,\n                        type: 'decoration',\n                        solid: false\n                    });\n                }\n            }\n        }\n\n        // 在新生成的区域添加敌人\n        this.spawnEnemiesInRange(startX, endX);\n    }\n\n    spawnEnemiesInRange(startX, endX) {\n        const enemyCount = Math.floor((endX - startX) / (this.canvas.width / 3));\n        for (let i = 0; i < enemyCount; i++) {\n            const x = startX + Math.random() * (endX - startX);\n            const y = this.canvas.height / 2;\n            \n            // 创建基础敌人\n            const enemy = new Enemy(x, y, this);\n            enemy.velocityX = Math.random() * 2 - 1; // 随机速度\n            this.enemies.push(enemy);\n        }\n    }\n\n    cleanupOffscreenEntities() {\n        const bufferZone = this.canvas.width * 2;\n        \n        // 清理地形\n        this.terrain = this.terrain.filter(tile => {\n            return tile.x >= this.camera.x - bufferZone && \n                   tile.x <= this.camera.x + this.canvas.width + bufferZone;\n        });\n        \n        // 清理敌人\n        this.enemies = this.enemies.filter(enemy => {\n            return enemy.x >= this.camera.x - bufferZone && \n                   enemy.x <= this.camera.x + this.canvas.width + bufferZone;\n        });\n    }\n}\n\n// 当页面加载完成后启动游戏\nwindow.addEventListener('load', () => {\n    const canvas = document.getElementById('gameCanvas');\n    const game = new Game(canvas);\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}