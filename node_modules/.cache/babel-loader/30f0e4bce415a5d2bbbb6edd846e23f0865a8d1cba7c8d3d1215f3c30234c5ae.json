{"ast":null,"code":"import _objectSpread from \"D:/slj_doc/game_2/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.fill.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.date.now.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.pad-start.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { ref, onMounted, onUnmounted } from 'vue';\nexport default {\n  name: 'SnakeGame',\n  setup: function setup() {\n    var gameCanvas = ref(null);\n    var canvasWidth = 600;\n    var canvasHeight = 400;\n    var gridSize = 20;\n    var score = ref(0);\n    var highScore = ref(localStorage.getItem('snakeHighScore') || 0);\n    var gameOver = ref(false);\n    var particles = ref([]);\n    var gameStarted = ref(false);\n    var ctx;\n    var snake = [];\n    var food = {};\n    var direction = 'right';\n    var nextDirection = 'right';\n    var gameLoop;\n    var particleLoop;\n    var initGame = function initGame() {\n      // 初始化蛇\n      snake = [{\n        x: 6,\n        y: 10\n      }, {\n        x: 5,\n        y: 10\n      }, {\n        x: 4,\n        y: 10\n      }];\n\n      // 生成第一个食物\n      generateFood();\n\n      // 重置游戏状态\n      score.value = 0;\n      gameOver.value = false;\n      direction = 'right';\n      nextDirection = 'right';\n      particles.value = [];\n      gameStarted.value = true;\n\n      // 开始游戏循环\n      if (gameLoop) clearInterval(gameLoop);\n      if (particleLoop) clearInterval(particleLoop);\n      gameLoop = setInterval(updateGame, 100);\n      particleLoop = setInterval(updateParticles, 16);\n    };\n    var generateFood = function generateFood() {\n      var maxX = Math.floor(canvasWidth / gridSize) - 1;\n      var maxY = Math.floor(canvasHeight / gridSize) - 1;\n      var newFood;\n      do {\n        newFood = {\n          x: Math.floor(Math.random() * maxX),\n          y: Math.floor(Math.random() * maxY)\n        };\n      } while (snake.some(function (segment) {\n        return segment.x === newFood.x && segment.y === newFood.y;\n      }));\n      food = newFood;\n\n      // 生成食物出现特效\n      createFoodEffect(food.x * gridSize + gridSize / 2, food.y * gridSize + gridSize / 2);\n    };\n    var createFoodEffect = function createFoodEffect(x, y) {\n      for (var i = 0; i < 10; i++) {\n        var angle = Math.PI * 2 / 10 * i;\n        particles.value.push({\n          x: x,\n          y: y,\n          vx: Math.cos(angle) * 2,\n          vy: Math.sin(angle) * 2,\n          life: 1,\n          color: '#e74c3c',\n          size: 3\n        });\n      }\n    };\n    var createSnakeEffect = function createSnakeEffect(x, y) {\n      for (var i = 0; i < 5; i++) {\n        particles.value.push({\n          x: x + Math.random() * gridSize,\n          y: y + Math.random() * gridSize,\n          vx: (Math.random() - 0.5) * 2,\n          vy: (Math.random() - 0.5) * 2,\n          life: 0.8,\n          color: '#4cd137',\n          size: 2\n        });\n      }\n    };\n    var updateParticles = function updateParticles() {\n      particles.value = particles.value.filter(function (particle) {\n        particle.x += particle.vx;\n        particle.y += particle.vy;\n        particle.life -= 0.02;\n        particle.size -= 0.05;\n        return particle.life > 0 && particle.size > 0;\n      });\n    };\n    var updateGame = function updateGame() {\n      if (gameOver.value) return;\n\n      // 更新方向\n      direction = nextDirection;\n\n      // 计算新的头部位置\n      var head = _objectSpread({}, snake[0]);\n      switch (direction) {\n        case 'up':\n          head.y--;\n          break;\n        case 'down':\n          head.y++;\n          break;\n        case 'left':\n          head.x--;\n          break;\n        case 'right':\n          head.x++;\n          break;\n      }\n\n      // 检查碰撞\n      if (checkCollision(head)) {\n        endGame();\n        return;\n      }\n\n      // 移动蛇\n      snake.unshift(head);\n      createSnakeEffect(head.x * gridSize, head.y * gridSize);\n\n      // 检查是否吃到食物\n      if (head.x === food.x && head.y === food.y) {\n        score.value += 10;\n        if (score.value > highScore.value) {\n          highScore.value = score.value;\n          localStorage.setItem('snakeHighScore', highScore.value);\n        }\n        generateFood();\n      } else {\n        snake.pop();\n      }\n\n      // 绘制游戏\n      drawGame();\n    };\n    var drawGame = function drawGame() {\n      if (!ctx) return;\n\n      // 绘制背景\n      ctx.fillStyle = '#1a1a1a';\n      ctx.fillRect(0, 0, canvasWidth, canvasHeight);\n\n      // 绘制网格\n      drawGrid();\n\n      // 绘制粒子\n      particles.value.forEach(function (particle) {\n        ctx.fillStyle = \"\".concat(particle.color).concat(Math.floor(particle.life * 255).toString(16).padStart(2, '0'));\n        ctx.beginPath();\n        ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\n        ctx.fill();\n      });\n\n      // 绘制蛇\n      snake.forEach(function (segment, index) {\n        var x = segment.x * gridSize;\n        var y = segment.y * gridSize;\n\n        // 创建渐变\n        var gradient = ctx.createLinearGradient(x, y, x + gridSize, y + gridSize);\n        if (index === 0) {\n          // 蛇头\n          gradient.addColorStop(0, '#4cd137');\n          gradient.addColorStop(1, '#44bd32');\n        } else {\n          // 蛇身\n          gradient.addColorStop(0, '#20bf6b');\n          gradient.addColorStop(1, '#26de81');\n        }\n        ctx.fillStyle = gradient;\n        ctx.shadowColor = '#4cd137';\n        ctx.shadowBlur = 10;\n\n        // 绘制圆角矩形\n        roundRect(ctx, x, y, gridSize - 1, gridSize - 1, 4);\n        ctx.fill();\n        ctx.shadowBlur = 0;\n      });\n\n      // 绘制食物\n      var foodX = food.x * gridSize;\n      var foodY = food.y * gridSize;\n      var pulseSize = Math.sin(Date.now() / 200) * 2;\n\n      // 食物光晕效果\n      var foodGradient = ctx.createRadialGradient(foodX + gridSize / 2, foodY + gridSize / 2, 0, foodX + gridSize / 2, foodY + gridSize / 2, gridSize / 2 + pulseSize);\n      foodGradient.addColorStop(0, '#e74c3c');\n      foodGradient.addColorStop(0.6, '#c0392b');\n      foodGradient.addColorStop(1, 'transparent');\n      ctx.fillStyle = foodGradient;\n      ctx.shadowColor = '#e74c3c';\n      ctx.shadowBlur = 15;\n      ctx.beginPath();\n      ctx.arc(foodX + gridSize / 2, foodY + gridSize / 2, gridSize / 2 + pulseSize, 0, Math.PI * 2);\n      ctx.fill();\n      ctx.shadowBlur = 0;\n    };\n    var drawGrid = function drawGrid() {\n      ctx.strokeStyle = '#2c3e50';\n      ctx.lineWidth = 0.5;\n\n      // 绘制垂直线\n      for (var x = 0; x <= canvasWidth; x += gridSize) {\n        ctx.beginPath();\n        ctx.moveTo(x, 0);\n        ctx.lineTo(x, canvasHeight);\n        ctx.stroke();\n      }\n\n      // 绘制水平线\n      for (var y = 0; y <= canvasHeight; y += gridSize) {\n        ctx.beginPath();\n        ctx.moveTo(0, y);\n        ctx.lineTo(canvasWidth, y);\n        ctx.stroke();\n      }\n    };\n    var roundRect = function roundRect(ctx, x, y, width, height, radius) {\n      ctx.beginPath();\n      ctx.moveTo(x + radius, y);\n      ctx.lineTo(x + width - radius, y);\n      ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n      ctx.lineTo(x + width, y + height - radius);\n      ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n      ctx.lineTo(x + radius, y + height);\n      ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n      ctx.lineTo(x, y + radius);\n      ctx.quadraticCurveTo(x, y, x + radius, y);\n      ctx.closePath();\n    };\n    var checkCollision = function checkCollision(head) {\n      // 检查墙壁碰撞\n      if (head.x < 0 || head.x >= canvasWidth / gridSize || head.y < 0 || head.y >= canvasHeight / gridSize) {\n        return true;\n      }\n\n      // 检查自身碰撞\n      return snake.some(function (segment) {\n        return segment.x === head.x && segment.y === head.y;\n      });\n    };\n    var handleKeydown = function handleKeydown(e) {\n      if (!gameStarted.value) {\n        initGame();\n        return;\n      }\n      switch (e.key) {\n        case 'ArrowUp':\n          if (direction !== 'down') nextDirection = 'up';\n          break;\n        case 'ArrowDown':\n          if (direction !== 'up') nextDirection = 'down';\n          break;\n        case 'ArrowLeft':\n          if (direction !== 'right') nextDirection = 'left';\n          break;\n        case 'ArrowRight':\n          if (direction !== 'left') nextDirection = 'right';\n          break;\n      }\n    };\n    var endGame = function endGame() {\n      gameOver.value = true;\n      gameStarted.value = false;\n      clearInterval(gameLoop);\n      clearInterval(particleLoop);\n\n      // 生成爆炸效果\n      for (var i = 0; i < 30; i++) {\n        var angle = Math.random() * Math.PI * 2;\n        var speed = Math.random() * 4 + 2;\n        particles.value.push({\n          x: snake[0].x * gridSize + gridSize / 2,\n          y: snake[0].y * gridSize + gridSize / 2,\n          vx: Math.cos(angle) * speed,\n          vy: Math.sin(angle) * speed,\n          life: 1,\n          color: '#e74c3c',\n          size: Math.random() * 4 + 2\n        });\n      }\n    };\n    var restartGame = function restartGame() {\n      initGame();\n    };\n    onMounted(function () {\n      ctx = gameCanvas.value.getContext('2d');\n      window.addEventListener('keydown', handleKeydown);\n      drawGame(); // 绘制初始状态\n    });\n    onUnmounted(function () {\n      window.removeEventListener('keydown', handleKeydown);\n      clearInterval(gameLoop);\n      clearInterval(particleLoop);\n    });\n    return {\n      gameCanvas: gameCanvas,\n      canvasWidth: canvasWidth,\n      canvasHeight: canvasHeight,\n      score: score,\n      highScore: highScore,\n      gameOver: gameOver,\n      gameStarted: gameStarted,\n      restartGame: restartGame\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","onUnmounted","name","setup","gameCanvas","canvasWidth","canvasHeight","gridSize","score","highScore","localStorage","getItem","gameOver","particles","gameStarted","ctx","snake","food","direction","nextDirection","gameLoop","particleLoop","initGame","x","y","generateFood","value","clearInterval","setInterval","updateGame","updateParticles","maxX","Math","floor","maxY","newFood","random","some","segment","createFoodEffect","i","angle","PI","push","vx","cos","vy","sin","life","color","size","createSnakeEffect","filter","particle","head","_objectSpread","checkCollision","endGame","unshift","setItem","pop","drawGame","fillStyle","fillRect","drawGrid","forEach","concat","toString","padStart","beginPath","arc","fill","index","gradient","createLinearGradient","addColorStop","shadowColor","shadowBlur","roundRect","foodX","foodY","pulseSize","Date","now","foodGradient","createRadialGradient","strokeStyle","lineWidth","moveTo","lineTo","stroke","width","height","radius","quadraticCurveTo","closePath","handleKeydown","e","key","speed","restartGame","getContext","window","addEventListener","removeEventListener"],"sources":["D:\\slj_doc\\game_2\\src\\components\\SnakeGame.vue"],"sourcesContent":["<template>\n  <div class=\"snake-game\">\n    <div class=\"game-header\">\n      <div class=\"score-container\">\n        <div class=\"score\">\n          <span class=\"label\">分数</span>\n          <span class=\"value\">{{ score }}</span>\n        </div>\n        <div class=\"high-score\">\n          <span class=\"label\">最高分</span>\n          <span class=\"value\">{{ highScore }}</span>\n        </div>\n      </div>\n      <div class=\"controls-info\">\n        <div class=\"key\">↑</div>\n        <div class=\"key-row\">\n          <div class=\"key\">←</div>\n          <div class=\"key\">↓</div>\n          <div class=\"key\">→</div>\n        </div>\n        <div class=\"key-label\">方向键控制</div>\n      </div>\n    </div>\n    \n    <canvas ref=\"gameCanvas\" :width=\"canvasWidth\" :height=\"canvasHeight\"></canvas>\n    \n    <div v-if=\"gameOver\" class=\"game-over\">\n      <div class=\"game-over-content\">\n        <h2>游戏结束</h2>\n        <div class=\"final-score\">\n          <span class=\"label\">最终得分</span>\n          <span class=\"value\">{{ score }}</span>\n        </div>\n        <button @click=\"restartGame\" class=\"restart-btn\">\n          <span class=\"btn-text\">重新开始</span>\n          <span class=\"btn-icon\">↺</span>\n        </button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, onUnmounted } from 'vue'\n\nexport default {\n  name: 'SnakeGame',\n  setup() {\n    const gameCanvas = ref(null)\n    const canvasWidth = 600\n    const canvasHeight = 400\n    const gridSize = 20\n    const score = ref(0)\n    const highScore = ref(localStorage.getItem('snakeHighScore') || 0)\n    const gameOver = ref(false)\n    const particles = ref([])\n    const gameStarted = ref(false)\n\n    let ctx\n    let snake = []\n    let food = {}\n    let direction = 'right'\n    let nextDirection = 'right'\n    let gameLoop\n    let particleLoop\n\n    const initGame = () => {\n      // 初始化蛇\n      snake = [\n        { x: 6, y: 10 },\n        { x: 5, y: 10 },\n        { x: 4, y: 10 }\n      ]\n      \n      // 生成第一个食物\n      generateFood()\n      \n      // 重置游戏状态\n      score.value = 0\n      gameOver.value = false\n      direction = 'right'\n      nextDirection = 'right'\n      particles.value = []\n      gameStarted.value = true\n      \n      // 开始游戏循环\n      if (gameLoop) clearInterval(gameLoop)\n      if (particleLoop) clearInterval(particleLoop)\n      \n      gameLoop = setInterval(updateGame, 100)\n      particleLoop = setInterval(updateParticles, 16)\n    }\n\n    const generateFood = () => {\n      const maxX = Math.floor(canvasWidth / gridSize) - 1\n      const maxY = Math.floor(canvasHeight / gridSize) - 1\n      \n      let newFood\n      do {\n        newFood = {\n          x: Math.floor(Math.random() * maxX),\n          y: Math.floor(Math.random() * maxY)\n        }\n      } while (snake.some(segment => segment.x === newFood.x && segment.y === newFood.y))\n      \n      food = newFood\n      \n      // 生成食物出现特效\n      createFoodEffect(food.x * gridSize + gridSize/2, food.y * gridSize + gridSize/2)\n    }\n\n    const createFoodEffect = (x, y) => {\n      for (let i = 0; i < 10; i++) {\n        const angle = (Math.PI * 2 / 10) * i\n        particles.value.push({\n          x,\n          y,\n          vx: Math.cos(angle) * 2,\n          vy: Math.sin(angle) * 2,\n          life: 1,\n          color: '#e74c3c',\n          size: 3\n        })\n      }\n    }\n\n    const createSnakeEffect = (x, y) => {\n      for (let i = 0; i < 5; i++) {\n        particles.value.push({\n          x: x + Math.random() * gridSize,\n          y: y + Math.random() * gridSize,\n          vx: (Math.random() - 0.5) * 2,\n          vy: (Math.random() - 0.5) * 2,\n          life: 0.8,\n          color: '#4cd137',\n          size: 2\n        })\n      }\n    }\n\n    const updateParticles = () => {\n      particles.value = particles.value.filter(particle => {\n        particle.x += particle.vx\n        particle.y += particle.vy\n        particle.life -= 0.02\n        particle.size -= 0.05\n        return particle.life > 0 && particle.size > 0\n      })\n    }\n\n    const updateGame = () => {\n      if (gameOver.value) return\n\n      // 更新方向\n      direction = nextDirection\n\n      // 计算新的头部位置\n      const head = { ...snake[0] }\n      switch (direction) {\n        case 'up':\n          head.y--\n          break\n        case 'down':\n          head.y++\n          break\n        case 'left':\n          head.x--\n          break\n        case 'right':\n          head.x++\n          break\n      }\n\n      // 检查碰撞\n      if (checkCollision(head)) {\n        endGame()\n        return\n      }\n\n      // 移动蛇\n      snake.unshift(head)\n      createSnakeEffect(head.x * gridSize, head.y * gridSize)\n\n      // 检查是否吃到食物\n      if (head.x === food.x && head.y === food.y) {\n        score.value += 10\n        if (score.value > highScore.value) {\n          highScore.value = score.value\n          localStorage.setItem('snakeHighScore', highScore.value)\n        }\n        generateFood()\n      } else {\n        snake.pop()\n      }\n\n      // 绘制游戏\n      drawGame()\n    }\n\n    const drawGame = () => {\n      if (!ctx) return\n\n      // 绘制背景\n      ctx.fillStyle = '#1a1a1a'\n      ctx.fillRect(0, 0, canvasWidth, canvasHeight)\n\n      // 绘制网格\n      drawGrid()\n\n      // 绘制粒子\n      particles.value.forEach(particle => {\n        ctx.fillStyle = `${particle.color}${Math.floor(particle.life * 255).toString(16).padStart(2, '0')}`\n        ctx.beginPath()\n        ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2)\n        ctx.fill()\n      })\n\n      // 绘制蛇\n      snake.forEach((segment, index) => {\n        const x = segment.x * gridSize\n        const y = segment.y * gridSize\n        \n        // 创建渐变\n        const gradient = ctx.createLinearGradient(x, y, x + gridSize, y + gridSize)\n        \n        if (index === 0) {\n          // 蛇头\n          gradient.addColorStop(0, '#4cd137')\n          gradient.addColorStop(1, '#44bd32')\n        } else {\n          // 蛇身\n          gradient.addColorStop(0, '#20bf6b')\n          gradient.addColorStop(1, '#26de81')\n        }\n        \n        ctx.fillStyle = gradient\n        ctx.shadowColor = '#4cd137'\n        ctx.shadowBlur = 10\n        \n        // 绘制圆角矩形\n        roundRect(ctx, x, y, gridSize - 1, gridSize - 1, 4)\n        ctx.fill()\n        \n        ctx.shadowBlur = 0\n      })\n\n      // 绘制食物\n      const foodX = food.x * gridSize\n      const foodY = food.y * gridSize\n      const pulseSize = Math.sin(Date.now() / 200) * 2\n\n      // 食物光晕效果\n      const foodGradient = ctx.createRadialGradient(\n        foodX + gridSize/2, foodY + gridSize/2, 0,\n        foodX + gridSize/2, foodY + gridSize/2, gridSize/2 + pulseSize\n      )\n      foodGradient.addColorStop(0, '#e74c3c')\n      foodGradient.addColorStop(0.6, '#c0392b')\n      foodGradient.addColorStop(1, 'transparent')\n\n      ctx.fillStyle = foodGradient\n      ctx.shadowColor = '#e74c3c'\n      ctx.shadowBlur = 15\n      ctx.beginPath()\n      ctx.arc(\n        foodX + gridSize/2,\n        foodY + gridSize/2,\n        gridSize/2 + pulseSize,\n        0,\n        Math.PI * 2\n      )\n      ctx.fill()\n      ctx.shadowBlur = 0\n    }\n\n    const drawGrid = () => {\n      ctx.strokeStyle = '#2c3e50'\n      ctx.lineWidth = 0.5\n      \n      // 绘制垂直线\n      for (let x = 0; x <= canvasWidth; x += gridSize) {\n        ctx.beginPath()\n        ctx.moveTo(x, 0)\n        ctx.lineTo(x, canvasHeight)\n        ctx.stroke()\n      }\n      \n      // 绘制水平线\n      for (let y = 0; y <= canvasHeight; y += gridSize) {\n        ctx.beginPath()\n        ctx.moveTo(0, y)\n        ctx.lineTo(canvasWidth, y)\n        ctx.stroke()\n      }\n    }\n\n    const roundRect = (ctx, x, y, width, height, radius) => {\n      ctx.beginPath()\n      ctx.moveTo(x + radius, y)\n      ctx.lineTo(x + width - radius, y)\n      ctx.quadraticCurveTo(x + width, y, x + width, y + radius)\n      ctx.lineTo(x + width, y + height - radius)\n      ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height)\n      ctx.lineTo(x + radius, y + height)\n      ctx.quadraticCurveTo(x, y + height, x, y + height - radius)\n      ctx.lineTo(x, y + radius)\n      ctx.quadraticCurveTo(x, y, x + radius, y)\n      ctx.closePath()\n    }\n\n    const checkCollision = (head) => {\n      // 检查墙壁碰撞\n      if (head.x < 0 || head.x >= canvasWidth / gridSize ||\n          head.y < 0 || head.y >= canvasHeight / gridSize) {\n        return true\n      }\n\n      // 检查自身碰撞\n      return snake.some(segment => segment.x === head.x && segment.y === head.y)\n    }\n\n    const handleKeydown = (e) => {\n      if (!gameStarted.value) {\n        initGame()\n        return\n      }\n\n      switch (e.key) {\n        case 'ArrowUp':\n          if (direction !== 'down') nextDirection = 'up'\n          break\n        case 'ArrowDown':\n          if (direction !== 'up') nextDirection = 'down'\n          break\n        case 'ArrowLeft':\n          if (direction !== 'right') nextDirection = 'left'\n          break\n        case 'ArrowRight':\n          if (direction !== 'left') nextDirection = 'right'\n          break\n      }\n    }\n\n    const endGame = () => {\n      gameOver.value = true\n      gameStarted.value = false\n      clearInterval(gameLoop)\n      clearInterval(particleLoop)\n      \n      // 生成爆炸效果\n      for (let i = 0; i < 30; i++) {\n        const angle = Math.random() * Math.PI * 2\n        const speed = Math.random() * 4 + 2\n        particles.value.push({\n          x: snake[0].x * gridSize + gridSize/2,\n          y: snake[0].y * gridSize + gridSize/2,\n          vx: Math.cos(angle) * speed,\n          vy: Math.sin(angle) * speed,\n          life: 1,\n          color: '#e74c3c',\n          size: Math.random() * 4 + 2\n        })\n      }\n    }\n\n    const restartGame = () => {\n      initGame()\n    }\n\n    onMounted(() => {\n      ctx = gameCanvas.value.getContext('2d')\n      window.addEventListener('keydown', handleKeydown)\n      drawGame() // 绘制初始状态\n    })\n\n    onUnmounted(() => {\n      window.removeEventListener('keydown', handleKeydown)\n      clearInterval(gameLoop)\n      clearInterval(particleLoop)\n    })\n\n    return {\n      gameCanvas,\n      canvasWidth,\n      canvasHeight,\n      score,\n      highScore,\n      gameOver,\n      gameStarted,\n      restartGame\n    }\n  }\n}\n</script>\n\n<style scoped>\n.snake-game {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 2rem;\n  padding: 2rem;\n  background: linear-gradient(135deg, #1a1a1a 0%, #2c3e50 100%);\n  border-radius: 16px;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);\n}\n\n.game-header {\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  max-width: 600px;\n}\n\n.score-container {\n  display: flex;\n  gap: 2rem;\n}\n\n.score, .high-score {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background: rgba(255, 255, 255, 0.1);\n  padding: 1rem 2rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n}\n\n.label {\n  font-size: 0.9rem;\n  color: #95a5a6;\n  text-transform: uppercase;\n  letter-spacing: 1px;\n}\n\n.value {\n  font-size: 2rem;\n  font-weight: bold;\n  color: #ecf0f1;\n  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n}\n\n.controls-info {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.key-row {\n  display: flex;\n  gap: 0.5rem;\n}\n\n.key {\n  width: 40px;\n  height: 40px;\n  background: rgba(255, 255, 255, 0.1);\n  border: 2px solid rgba(255, 255, 255, 0.2);\n  border-radius: 8px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #ecf0f1;\n  font-size: 1.2rem;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n}\n\n.key-label {\n  color: #95a5a6;\n  font-size: 0.8rem;\n  text-transform: uppercase;\n  letter-spacing: 1px;\n}\n\ncanvas {\n  border: 4px solid rgba(255, 255, 255, 0.1);\n  border-radius: 12px;\n  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.3);\n}\n\n.game-over {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.8);\n  backdrop-filter: blur(8px);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.game-over-content {\n  background: rgba(255, 255, 255, 0.1);\n  padding: 3rem;\n  border-radius: 16px;\n  text-align: center;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.game-over h2 {\n  font-size: 2.5rem;\n  color: #ecf0f1;\n  margin-bottom: 2rem;\n  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n}\n\n.final-score {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 2rem;\n}\n\n.restart-btn {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  padding: 1rem 2rem;\n  font-size: 1.2rem;\n  background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);\n  color: white;\n  border: none;\n  border-radius: 8px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  box-shadow: 0 4px 12px rgba(231, 76, 60, 0.3);\n}\n\n.restart-btn:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 6px 16px rgba(231, 76, 60, 0.4);\n}\n\n.btn-text {\n  font-weight: bold;\n  letter-spacing: 1px;\n}\n\n.btn-icon {\n  font-size: 1.5rem;\n}\n\n@keyframes pulse {\n  0% { transform: scale(1); }\n  50% { transform: scale(1.05); }\n  100% { transform: scale(1); }\n}\n\n.score.highlight {\n  animation: pulse 0.3s ease;\n}\n</style>\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AA2CA,SAASA,GAAG,EAAEC,SAAS,EAAEC,WAAU,QAAS,KAAI;AAEhD,eAAe;EACbC,IAAI,EAAE,WAAW;EACjBC,KAAK,WAALA,KAAKA,CAAA,EAAG;IACN,IAAMC,UAAS,GAAIL,GAAG,CAAC,IAAI;IAC3B,IAAMM,WAAU,GAAI,GAAE;IACtB,IAAMC,YAAW,GAAI,GAAE;IACvB,IAAMC,QAAO,GAAI,EAAC;IAClB,IAAMC,KAAI,GAAIT,GAAG,CAAC,CAAC;IACnB,IAAMU,SAAQ,GAAIV,GAAG,CAACW,YAAY,CAACC,OAAO,CAAC,gBAAgB,KAAK,CAAC;IACjE,IAAMC,QAAO,GAAIb,GAAG,CAAC,KAAK;IAC1B,IAAMc,SAAQ,GAAId,GAAG,CAAC,EAAE;IACxB,IAAMe,WAAU,GAAIf,GAAG,CAAC,KAAK;IAE7B,IAAIgB,GAAE;IACN,IAAIC,KAAI,GAAI,EAAC;IACb,IAAIC,IAAG,GAAI,CAAC;IACZ,IAAIC,SAAQ,GAAI,OAAM;IACtB,IAAIC,aAAY,GAAI,OAAM;IAC1B,IAAIC,QAAO;IACX,IAAIC,YAAW;IAEf,IAAMC,QAAO,GAAI,SAAXA,QAAOA,CAAA,EAAU;MACrB;MACAN,KAAI,GAAI,CACN;QAAEO,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE;MAAG,CAAC,EACf;QAAED,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE;MAAG,CAAC,EACf;QAAED,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE;MAAG,EAChB;;MAEA;MACAC,YAAY,CAAC;;MAEb;MACAjB,KAAK,CAACkB,KAAI,GAAI;MACdd,QAAQ,CAACc,KAAI,GAAI,KAAI;MACrBR,SAAQ,GAAI,OAAM;MAClBC,aAAY,GAAI,OAAM;MACtBN,SAAS,CAACa,KAAI,GAAI,EAAC;MACnBZ,WAAW,CAACY,KAAI,GAAI,IAAG;;MAEvB;MACA,IAAIN,QAAQ,EAAEO,aAAa,CAACP,QAAQ;MACpC,IAAIC,YAAY,EAAEM,aAAa,CAACN,YAAY;MAE5CD,QAAO,GAAIQ,WAAW,CAACC,UAAU,EAAE,GAAG;MACtCR,YAAW,GAAIO,WAAW,CAACE,eAAe,EAAE,EAAE;IAChD;IAEA,IAAML,YAAW,GAAI,SAAfA,YAAWA,CAAA,EAAU;MACzB,IAAMM,IAAG,GAAIC,IAAI,CAACC,KAAK,CAAC5B,WAAU,GAAIE,QAAQ,IAAI;MAClD,IAAM2B,IAAG,GAAIF,IAAI,CAACC,KAAK,CAAC3B,YAAW,GAAIC,QAAQ,IAAI;MAEnD,IAAI4B,OAAM;MACV,GAAG;QACDA,OAAM,GAAI;UACRZ,CAAC,EAAES,IAAI,CAACC,KAAK,CAACD,IAAI,CAACI,MAAM,CAAC,IAAIL,IAAI,CAAC;UACnCP,CAAC,EAAEQ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACI,MAAM,CAAC,IAAIF,IAAI;QACpC;MACF,SAASlB,KAAK,CAACqB,IAAI,CAAC,UAAAC,OAAM;QAAA,OAAKA,OAAO,CAACf,CAAA,KAAMY,OAAO,CAACZ,CAAA,IAAKe,OAAO,CAACd,CAAA,KAAMW,OAAO,CAACX,CAAC;MAAA,EAAC;MAElFP,IAAG,GAAIkB,OAAM;;MAEb;MACAI,gBAAgB,CAACtB,IAAI,CAACM,CAAA,GAAIhB,QAAO,GAAIA,QAAQ,GAAC,CAAC,EAAEU,IAAI,CAACO,CAAA,GAAIjB,QAAO,GAAIA,QAAQ,GAAC,CAAC;IACjF;IAEA,IAAMgC,gBAAe,GAAI,SAAnBA,gBAAeA,CAAKhB,CAAC,EAAEC,CAAC,EAAK;MACjC,KAAK,IAAIgB,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAI,EAAE,EAAEA,CAAC,EAAE,EAAE;QAC3B,IAAMC,KAAI,GAAKT,IAAI,CAACU,EAAC,GAAI,IAAI,EAAE,GAAIF,CAAA;QACnC3B,SAAS,CAACa,KAAK,CAACiB,IAAI,CAAC;UACnBpB,CAAC,EAADA,CAAC;UACDC,CAAC,EAADA,CAAC;UACDoB,EAAE,EAAEZ,IAAI,CAACa,GAAG,CAACJ,KAAK,IAAI,CAAC;UACvBK,EAAE,EAAEd,IAAI,CAACe,GAAG,CAACN,KAAK,IAAI,CAAC;UACvBO,IAAI,EAAE,CAAC;UACPC,KAAK,EAAE,SAAS;UAChBC,IAAI,EAAE;QACR,CAAC;MACH;IACF;IAEA,IAAMC,iBAAgB,GAAI,SAApBA,iBAAgBA,CAAK5B,CAAC,EAAEC,CAAC,EAAK;MAClC,KAAK,IAAIgB,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC1B3B,SAAS,CAACa,KAAK,CAACiB,IAAI,CAAC;UACnBpB,CAAC,EAAEA,CAAA,GAAIS,IAAI,CAACI,MAAM,CAAC,IAAI7B,QAAQ;UAC/BiB,CAAC,EAAEA,CAAA,GAAIQ,IAAI,CAACI,MAAM,CAAC,IAAI7B,QAAQ;UAC/BqC,EAAE,EAAE,CAACZ,IAAI,CAACI,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;UAC7BU,EAAE,EAAE,CAACd,IAAI,CAACI,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;UAC7BY,IAAI,EAAE,GAAG;UACTC,KAAK,EAAE,SAAS;UAChBC,IAAI,EAAE;QACR,CAAC;MACH;IACF;IAEA,IAAMpB,eAAc,GAAI,SAAlBA,eAAcA,CAAA,EAAU;MAC5BjB,SAAS,CAACa,KAAI,GAAIb,SAAS,CAACa,KAAK,CAAC0B,MAAM,CAAC,UAAAC,QAAO,EAAK;QACnDA,QAAQ,CAAC9B,CAAA,IAAK8B,QAAQ,CAACT,EAAC;QACxBS,QAAQ,CAAC7B,CAAA,IAAK6B,QAAQ,CAACP,EAAC;QACxBO,QAAQ,CAACL,IAAG,IAAK,IAAG;QACpBK,QAAQ,CAACH,IAAG,IAAK,IAAG;QACpB,OAAOG,QAAQ,CAACL,IAAG,GAAI,KAAKK,QAAQ,CAACH,IAAG,GAAI;MAC9C,CAAC;IACH;IAEA,IAAMrB,UAAS,GAAI,SAAbA,UAASA,CAAA,EAAU;MACvB,IAAIjB,QAAQ,CAACc,KAAK,EAAE;;MAEpB;MACAR,SAAQ,GAAIC,aAAY;;MAExB;MACA,IAAMmC,IAAG,GAAAC,aAAA,KAASvC,KAAK,CAAC,CAAC,EAAE;MAC3B,QAAQE,SAAS;QACf,KAAK,IAAI;UACPoC,IAAI,CAAC9B,CAAC,EAAC;UACP;QACF,KAAK,MAAM;UACT8B,IAAI,CAAC9B,CAAC,EAAC;UACP;QACF,KAAK,MAAM;UACT8B,IAAI,CAAC/B,CAAC,EAAC;UACP;QACF,KAAK,OAAO;UACV+B,IAAI,CAAC/B,CAAC,EAAC;UACP;MACJ;;MAEA;MACA,IAAIiC,cAAc,CAACF,IAAI,CAAC,EAAE;QACxBG,OAAO,CAAC;QACR;MACF;;MAEA;MACAzC,KAAK,CAAC0C,OAAO,CAACJ,IAAI;MAClBH,iBAAiB,CAACG,IAAI,CAAC/B,CAAA,GAAIhB,QAAQ,EAAE+C,IAAI,CAAC9B,CAAA,GAAIjB,QAAQ;;MAEtD;MACA,IAAI+C,IAAI,CAAC/B,CAAA,KAAMN,IAAI,CAACM,CAAA,IAAK+B,IAAI,CAAC9B,CAAA,KAAMP,IAAI,CAACO,CAAC,EAAE;QAC1ChB,KAAK,CAACkB,KAAI,IAAK,EAAC;QAChB,IAAIlB,KAAK,CAACkB,KAAI,GAAIjB,SAAS,CAACiB,KAAK,EAAE;UACjCjB,SAAS,CAACiB,KAAI,GAAIlB,KAAK,CAACkB,KAAI;UAC5BhB,YAAY,CAACiD,OAAO,CAAC,gBAAgB,EAAElD,SAAS,CAACiB,KAAK;QACxD;QACAD,YAAY,CAAC;MACf,OAAO;QACLT,KAAK,CAAC4C,GAAG,CAAC;MACZ;;MAEA;MACAC,QAAQ,CAAC;IACX;IAEA,IAAMA,QAAO,GAAI,SAAXA,QAAOA,CAAA,EAAU;MACrB,IAAI,CAAC9C,GAAG,EAAE;;MAEV;MACAA,GAAG,CAAC+C,SAAQ,GAAI,SAAQ;MACxB/C,GAAG,CAACgD,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE1D,WAAW,EAAEC,YAAY;;MAE5C;MACA0D,QAAQ,CAAC;;MAET;MACAnD,SAAS,CAACa,KAAK,CAACuC,OAAO,CAAC,UAAAZ,QAAO,EAAK;QAClCtC,GAAG,CAAC+C,SAAQ,MAAAI,MAAA,CAAOb,QAAQ,CAACJ,KAAK,EAAAiB,MAAA,CAAGlC,IAAI,CAACC,KAAK,CAACoB,QAAQ,CAACL,IAAG,GAAI,GAAG,CAAC,CAACmB,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QAClGrD,GAAG,CAACsD,SAAS,CAAC;QACdtD,GAAG,CAACuD,GAAG,CAACjB,QAAQ,CAAC9B,CAAC,EAAE8B,QAAQ,CAAC7B,CAAC,EAAE6B,QAAQ,CAACH,IAAI,EAAE,CAAC,EAAElB,IAAI,CAACU,EAAC,GAAI,CAAC;QAC7D3B,GAAG,CAACwD,IAAI,CAAC;MACX,CAAC;;MAED;MACAvD,KAAK,CAACiD,OAAO,CAAC,UAAC3B,OAAO,EAAEkC,KAAK,EAAK;QAChC,IAAMjD,CAAA,GAAIe,OAAO,CAACf,CAAA,GAAIhB,QAAO;QAC7B,IAAMiB,CAAA,GAAIc,OAAO,CAACd,CAAA,GAAIjB,QAAO;;QAE7B;QACA,IAAMkE,QAAO,GAAI1D,GAAG,CAAC2D,oBAAoB,CAACnD,CAAC,EAAEC,CAAC,EAAED,CAAA,GAAIhB,QAAQ,EAAEiB,CAAA,GAAIjB,QAAQ;QAE1E,IAAIiE,KAAI,KAAM,CAAC,EAAE;UACf;UACAC,QAAQ,CAACE,YAAY,CAAC,CAAC,EAAE,SAAS;UAClCF,QAAQ,CAACE,YAAY,CAAC,CAAC,EAAE,SAAS;QACpC,OAAO;UACL;UACAF,QAAQ,CAACE,YAAY,CAAC,CAAC,EAAE,SAAS;UAClCF,QAAQ,CAACE,YAAY,CAAC,CAAC,EAAE,SAAS;QACpC;QAEA5D,GAAG,CAAC+C,SAAQ,GAAIW,QAAO;QACvB1D,GAAG,CAAC6D,WAAU,GAAI,SAAQ;QAC1B7D,GAAG,CAAC8D,UAAS,GAAI,EAAC;;QAElB;QACAC,SAAS,CAAC/D,GAAG,EAAEQ,CAAC,EAAEC,CAAC,EAAEjB,QAAO,GAAI,CAAC,EAAEA,QAAO,GAAI,CAAC,EAAE,CAAC;QAClDQ,GAAG,CAACwD,IAAI,CAAC;QAETxD,GAAG,CAAC8D,UAAS,GAAI;MACnB,CAAC;;MAED;MACA,IAAME,KAAI,GAAI9D,IAAI,CAACM,CAAA,GAAIhB,QAAO;MAC9B,IAAMyE,KAAI,GAAI/D,IAAI,CAACO,CAAA,GAAIjB,QAAO;MAC9B,IAAM0E,SAAQ,GAAIjD,IAAI,CAACe,GAAG,CAACmC,IAAI,CAACC,GAAG,CAAC,IAAI,GAAG,IAAI;;MAE/C;MACA,IAAMC,YAAW,GAAIrE,GAAG,CAACsE,oBAAoB,CAC3CN,KAAI,GAAIxE,QAAQ,GAAC,CAAC,EAAEyE,KAAI,GAAIzE,QAAQ,GAAC,CAAC,EAAE,CAAC,EACzCwE,KAAI,GAAIxE,QAAQ,GAAC,CAAC,EAAEyE,KAAI,GAAIzE,QAAQ,GAAC,CAAC,EAAEA,QAAQ,GAAC,IAAI0E,SACvD;MACAG,YAAY,CAACT,YAAY,CAAC,CAAC,EAAE,SAAS;MACtCS,YAAY,CAACT,YAAY,CAAC,GAAG,EAAE,SAAS;MACxCS,YAAY,CAACT,YAAY,CAAC,CAAC,EAAE,aAAa;MAE1C5D,GAAG,CAAC+C,SAAQ,GAAIsB,YAAW;MAC3BrE,GAAG,CAAC6D,WAAU,GAAI,SAAQ;MAC1B7D,GAAG,CAAC8D,UAAS,GAAI,EAAC;MAClB9D,GAAG,CAACsD,SAAS,CAAC;MACdtD,GAAG,CAACuD,GAAG,CACLS,KAAI,GAAIxE,QAAQ,GAAC,CAAC,EAClByE,KAAI,GAAIzE,QAAQ,GAAC,CAAC,EAClBA,QAAQ,GAAC,IAAI0E,SAAS,EACtB,CAAC,EACDjD,IAAI,CAACU,EAAC,GAAI,CACZ;MACA3B,GAAG,CAACwD,IAAI,CAAC;MACTxD,GAAG,CAAC8D,UAAS,GAAI;IACnB;IAEA,IAAMb,QAAO,GAAI,SAAXA,QAAOA,CAAA,EAAU;MACrBjD,GAAG,CAACuE,WAAU,GAAI,SAAQ;MAC1BvE,GAAG,CAACwE,SAAQ,GAAI,GAAE;;MAElB;MACA,KAAK,IAAIhE,CAAA,GAAI,CAAC,EAAEA,CAAA,IAAKlB,WAAW,EAAEkB,CAAA,IAAKhB,QAAQ,EAAE;QAC/CQ,GAAG,CAACsD,SAAS,CAAC;QACdtD,GAAG,CAACyE,MAAM,CAACjE,CAAC,EAAE,CAAC;QACfR,GAAG,CAAC0E,MAAM,CAAClE,CAAC,EAAEjB,YAAY;QAC1BS,GAAG,CAAC2E,MAAM,CAAC;MACb;;MAEA;MACA,KAAK,IAAIlE,CAAA,GAAI,CAAC,EAAEA,CAAA,IAAKlB,YAAY,EAAEkB,CAAA,IAAKjB,QAAQ,EAAE;QAChDQ,GAAG,CAACsD,SAAS,CAAC;QACdtD,GAAG,CAACyE,MAAM,CAAC,CAAC,EAAEhE,CAAC;QACfT,GAAG,CAAC0E,MAAM,CAACpF,WAAW,EAAEmB,CAAC;QACzBT,GAAG,CAAC2E,MAAM,CAAC;MACb;IACF;IAEA,IAAMZ,SAAQ,GAAI,SAAZA,SAAQA,CAAK/D,GAAG,EAAEQ,CAAC,EAAEC,CAAC,EAAEmE,KAAK,EAAEC,MAAM,EAAEC,MAAM,EAAK;MACtD9E,GAAG,CAACsD,SAAS,CAAC;MACdtD,GAAG,CAACyE,MAAM,CAACjE,CAAA,GAAIsE,MAAM,EAAErE,CAAC;MACxBT,GAAG,CAAC0E,MAAM,CAAClE,CAAA,GAAIoE,KAAI,GAAIE,MAAM,EAAErE,CAAC;MAChCT,GAAG,CAAC+E,gBAAgB,CAACvE,CAAA,GAAIoE,KAAK,EAAEnE,CAAC,EAAED,CAAA,GAAIoE,KAAK,EAAEnE,CAAA,GAAIqE,MAAM;MACxD9E,GAAG,CAAC0E,MAAM,CAAClE,CAAA,GAAIoE,KAAK,EAAEnE,CAAA,GAAIoE,MAAK,GAAIC,MAAM;MACzC9E,GAAG,CAAC+E,gBAAgB,CAACvE,CAAA,GAAIoE,KAAK,EAAEnE,CAAA,GAAIoE,MAAM,EAAErE,CAAA,GAAIoE,KAAI,GAAIE,MAAM,EAAErE,CAAA,GAAIoE,MAAM;MAC1E7E,GAAG,CAAC0E,MAAM,CAAClE,CAAA,GAAIsE,MAAM,EAAErE,CAAA,GAAIoE,MAAM;MACjC7E,GAAG,CAAC+E,gBAAgB,CAACvE,CAAC,EAAEC,CAAA,GAAIoE,MAAM,EAAErE,CAAC,EAAEC,CAAA,GAAIoE,MAAK,GAAIC,MAAM;MAC1D9E,GAAG,CAAC0E,MAAM,CAAClE,CAAC,EAAEC,CAAA,GAAIqE,MAAM;MACxB9E,GAAG,CAAC+E,gBAAgB,CAACvE,CAAC,EAAEC,CAAC,EAAED,CAAA,GAAIsE,MAAM,EAAErE,CAAC;MACxCT,GAAG,CAACgF,SAAS,CAAC;IAChB;IAEA,IAAMvC,cAAa,GAAI,SAAjBA,cAAaA,CAAKF,IAAI,EAAK;MAC/B;MACA,IAAIA,IAAI,CAAC/B,CAAA,GAAI,KAAK+B,IAAI,CAAC/B,CAAA,IAAKlB,WAAU,GAAIE,QAAO,IAC7C+C,IAAI,CAAC9B,CAAA,GAAI,KAAK8B,IAAI,CAAC9B,CAAA,IAAKlB,YAAW,GAAIC,QAAQ,EAAE;QACnD,OAAO,IAAG;MACZ;;MAEA;MACA,OAAOS,KAAK,CAACqB,IAAI,CAAC,UAAAC,OAAM;QAAA,OAAKA,OAAO,CAACf,CAAA,KAAM+B,IAAI,CAAC/B,CAAA,IAAKe,OAAO,CAACd,CAAA,KAAM8B,IAAI,CAAC9B,CAAC;MAAA;IAC3E;IAEA,IAAMwE,aAAY,GAAI,SAAhBA,aAAYA,CAAKC,CAAC,EAAK;MAC3B,IAAI,CAACnF,WAAW,CAACY,KAAK,EAAE;QACtBJ,QAAQ,CAAC;QACT;MACF;MAEA,QAAQ2E,CAAC,CAACC,GAAG;QACX,KAAK,SAAS;UACZ,IAAIhF,SAAQ,KAAM,MAAM,EAAEC,aAAY,GAAI,IAAG;UAC7C;QACF,KAAK,WAAW;UACd,IAAID,SAAQ,KAAM,IAAI,EAAEC,aAAY,GAAI,MAAK;UAC7C;QACF,KAAK,WAAW;UACd,IAAID,SAAQ,KAAM,OAAO,EAAEC,aAAY,GAAI,MAAK;UAChD;QACF,KAAK,YAAY;UACf,IAAID,SAAQ,KAAM,MAAM,EAAEC,aAAY,GAAI,OAAM;UAChD;MACJ;IACF;IAEA,IAAMsC,OAAM,GAAI,SAAVA,OAAMA,CAAA,EAAU;MACpB7C,QAAQ,CAACc,KAAI,GAAI,IAAG;MACpBZ,WAAW,CAACY,KAAI,GAAI,KAAI;MACxBC,aAAa,CAACP,QAAQ;MACtBO,aAAa,CAACN,YAAY;;MAE1B;MACA,KAAK,IAAImB,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAI,EAAE,EAAEA,CAAC,EAAE,EAAE;QAC3B,IAAMC,KAAI,GAAIT,IAAI,CAACI,MAAM,CAAC,IAAIJ,IAAI,CAACU,EAAC,GAAI;QACxC,IAAMyD,KAAI,GAAInE,IAAI,CAACI,MAAM,CAAC,IAAI,IAAI;QAClCvB,SAAS,CAACa,KAAK,CAACiB,IAAI,CAAC;UACnBpB,CAAC,EAAEP,KAAK,CAAC,CAAC,CAAC,CAACO,CAAA,GAAIhB,QAAO,GAAIA,QAAQ,GAAC,CAAC;UACrCiB,CAAC,EAAER,KAAK,CAAC,CAAC,CAAC,CAACQ,CAAA,GAAIjB,QAAO,GAAIA,QAAQ,GAAC,CAAC;UACrCqC,EAAE,EAAEZ,IAAI,CAACa,GAAG,CAACJ,KAAK,IAAI0D,KAAK;UAC3BrD,EAAE,EAAEd,IAAI,CAACe,GAAG,CAACN,KAAK,IAAI0D,KAAK;UAC3BnD,IAAI,EAAE,CAAC;UACPC,KAAK,EAAE,SAAS;UAChBC,IAAI,EAAElB,IAAI,CAACI,MAAM,CAAC,IAAI,IAAI;QAC5B,CAAC;MACH;IACF;IAEA,IAAMgE,WAAU,GAAI,SAAdA,WAAUA,CAAA,EAAU;MACxB9E,QAAQ,CAAC;IACX;IAEAtB,SAAS,CAAC,YAAM;MACde,GAAE,GAAIX,UAAU,CAACsB,KAAK,CAAC2E,UAAU,CAAC,IAAI;MACtCC,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAEP,aAAa;MAChDnC,QAAQ,CAAC,GAAE;IACb,CAAC;IAED5D,WAAW,CAAC,YAAM;MAChBqG,MAAM,CAACE,mBAAmB,CAAC,SAAS,EAAER,aAAa;MACnDrE,aAAa,CAACP,QAAQ;MACtBO,aAAa,CAACN,YAAY;IAC5B,CAAC;IAED,OAAO;MACLjB,UAAU,EAAVA,UAAU;MACVC,WAAW,EAAXA,WAAW;MACXC,YAAY,EAAZA,YAAY;MACZE,KAAK,EAALA,KAAK;MACLC,SAAS,EAATA,SAAS;MACTG,QAAQ,EAARA,QAAQ;MACRE,WAAW,EAAXA,WAAW;MACXsF,WAAU,EAAVA;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}