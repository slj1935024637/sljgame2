{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"snake-game\"\n};\nvar _hoisted_2 = {\n  \"class\": \"game-info\"\n};\nvar _hoisted_3 = {\n  \"class\": \"score\"\n};\nvar _hoisted_4 = {\n  \"class\": \"high-score\"\n};\nvar _hoisted_5 = [\"width\", \"height\"];\nvar _hoisted_6 = {\n  key: 0,\n  \"class\": \"game-over\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, \"分数: \" + _toDisplayString($setup.score), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_4, \"最高分: \" + _toDisplayString($setup.highScore), 1 /* TEXT */)]), _createElementVNode(\"canvas\", {\n    ref: \"gameCanvas\",\n    width: $setup.canvasWidth,\n    height: $setup.canvasHeight\n  }, null, 8 /* PROPS */, _hoisted_5), $setup.gameOver ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [_cache[1] || (_cache[1] = _createElementVNode(\"h2\", null, \"游戏结束\", -1 /* HOISTED */)), _createElementVNode(\"p\", null, \"最终得分: \" + _toDisplayString($setup.score), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = function () {\n      return $setup.restartGame && $setup.restartGame.apply($setup, arguments);\n    })\n  }, \"重新开始\")])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_toDisplayString","$setup","score","_hoisted_4","highScore","ref","width","canvasWidth","height","canvasHeight","_hoisted_5","gameOver","_hoisted_6","onClick","_cache","restartGame","apply","arguments","_createCommentVNode"],"sources":["D:\\slj_doc\\game_2\\src\\components\\SnakeGame.vue"],"sourcesContent":["<template>\n  <div class=\"snake-game\">\n    <div class=\"game-info\">\n      <div class=\"score\">分数: {{ score }}</div>\n      <div class=\"high-score\">最高分: {{ highScore }}</div>\n    </div>\n    <canvas ref=\"gameCanvas\" :width=\"canvasWidth\" :height=\"canvasHeight\"></canvas>\n    <div v-if=\"gameOver\" class=\"game-over\">\n      <h2>游戏结束</h2>\n      <p>最终得分: {{ score }}</p>\n      <button @click=\"restartGame\">重新开始</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, onUnmounted } from 'vue'\n\nexport default {\n  name: 'SnakeGame',\n  setup() {\n    const gameCanvas = ref(null)\n    const canvasWidth = 600\n    const canvasHeight = 400\n    const gridSize = 20\n    const score = ref(0)\n    const highScore = ref(localStorage.getItem('snakeHighScore') || 0)\n    const gameOver = ref(false)\n\n    let ctx\n    let snake = []\n    let food = {}\n    let direction = 'right'\n    let nextDirection = 'right'\n    let gameLoop\n\n    const initGame = () => {\n      // 初始化蛇\n      snake = [\n        { x: 6, y: 10 },\n        { x: 5, y: 10 },\n        { x: 4, y: 10 }\n      ]\n      \n      // 生成第一个食物\n      generateFood()\n      \n      // 重置游戏状态\n      score.value = 0\n      gameOver.value = false\n      direction = 'right'\n      nextDirection = 'right'\n      \n      // 开始游戏循环\n      if (gameLoop) clearInterval(gameLoop)\n      gameLoop = setInterval(updateGame, 100)\n    }\n\n    const generateFood = () => {\n      const maxX = Math.floor(canvasWidth / gridSize) - 1\n      const maxY = Math.floor(canvasHeight / gridSize) - 1\n      \n      // 生成随机位置\n      let newFood\n      do {\n        newFood = {\n          x: Math.floor(Math.random() * maxX),\n          y: Math.floor(Math.random() * maxY)\n        }\n      } while (snake.some(segment => segment.x === newFood.x && segment.y === newFood.y))\n      \n      food = newFood\n    }\n\n    const updateGame = () => {\n      if (gameOver.value) return\n\n      // 更新方向\n      direction = nextDirection\n\n      // 计算新的头部位置\n      const head = { ...snake[0] }\n      switch (direction) {\n        case 'up':\n          head.y--\n          break\n        case 'down':\n          head.y++\n          break\n        case 'left':\n          head.x--\n          break\n        case 'right':\n          head.x++\n          break\n      }\n\n      // 检查碰撞\n      if (checkCollision(head)) {\n        endGame()\n        return\n      }\n\n      // 移动蛇\n      snake.unshift(head)\n\n      // 检查是否吃到食物\n      if (head.x === food.x && head.y === food.y) {\n        score.value += 10\n        if (score.value > highScore.value) {\n          highScore.value = score.value\n          localStorage.setItem('snakeHighScore', highScore.value)\n        }\n        generateFood()\n      } else {\n        snake.pop()\n      }\n\n      // 绘制游戏\n      drawGame()\n    }\n\n    const checkCollision = (head) => {\n      // 检查墙壁碰撞\n      if (head.x < 0 || head.x >= canvasWidth / gridSize ||\n          head.y < 0 || head.y >= canvasHeight / gridSize) {\n        return true\n      }\n\n      // 检查自身碰撞\n      return snake.some(segment => segment.x === head.x && segment.y === head.y)\n    }\n\n    const drawGame = () => {\n      if (!ctx) return\n\n      // 清空画布\n      ctx.fillStyle = '#2c3e50'\n      ctx.fillRect(0, 0, canvasWidth, canvasHeight)\n\n      // 绘制蛇\n      ctx.fillStyle = '#27ae60'\n      snake.forEach((segment, index) => {\n        if (index === 0) {\n          // 蛇头用不同颜色\n          ctx.fillStyle = '#2ecc71'\n        } else {\n          ctx.fillStyle = '#27ae60'\n        }\n        ctx.fillRect(\n          segment.x * gridSize,\n          segment.y * gridSize,\n          gridSize - 1,\n          gridSize - 1\n        )\n      })\n\n      // 绘制食物\n      ctx.fillStyle = '#e74c3c'\n      ctx.fillRect(\n        food.x * gridSize,\n        food.y * gridSize,\n        gridSize - 1,\n        gridSize - 1\n      )\n    }\n\n    const handleKeydown = (e) => {\n      switch (e.key) {\n        case 'ArrowUp':\n          if (direction !== 'down') nextDirection = 'up'\n          break\n        case 'ArrowDown':\n          if (direction !== 'up') nextDirection = 'down'\n          break\n        case 'ArrowLeft':\n          if (direction !== 'right') nextDirection = 'left'\n          break\n        case 'ArrowRight':\n          if (direction !== 'left') nextDirection = 'right'\n          break\n      }\n    }\n\n    const endGame = () => {\n      gameOver.value = true\n      clearInterval(gameLoop)\n    }\n\n    const restartGame = () => {\n      initGame()\n    }\n\n    onMounted(() => {\n      ctx = gameCanvas.value.getContext('2d')\n      window.addEventListener('keydown', handleKeydown)\n      initGame()\n    })\n\n    onUnmounted(() => {\n      window.removeEventListener('keydown', handleKeydown)\n      clearInterval(gameLoop)\n    })\n\n    return {\n      gameCanvas,\n      canvasWidth,\n      canvasHeight,\n      score,\n      highScore,\n      gameOver,\n      restartGame\n    }\n  }\n}\n</script>\n\n<style scoped>\n.snake-game {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 1rem;\n}\n\n.game-info {\n  display: flex;\n  gap: 2rem;\n  color: white;\n  font-size: 1.5rem;\n}\n\ncanvas {\n  border: 4px solid #34495e;\n  border-radius: 8px;\n}\n\n.game-over {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: rgba(0, 0, 0, 0.8);\n  padding: 2rem;\n  border-radius: 8px;\n  text-align: center;\n  color: white;\n}\n\n.game-over h2 {\n  font-size: 2rem;\n  margin-bottom: 1rem;\n}\n\n.game-over button {\n  margin-top: 1rem;\n  padding: 0.5rem 1rem;\n  font-size: 1.2rem;\n  background-color: #e74c3c;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.game-over button:hover {\n  background-color: #c0392b;\n}\n</style>\n"],"mappings":";;EACO,SAAM;AAAY;;EAChB,SAAM;AAAW;;EACf,SAAM;AAAO;;EACb,SAAM;AAAY;iBAJ7B;;EAAAA,GAAA;EAOyB,SAAM;;;uBAN7BC,mBAAA,CAWM,OAXNC,UAWM,GAVJC,mBAAA,CAGM,OAHNC,UAGM,GAFJD,mBAAA,CAAwC,OAAxCE,UAAwC,EAArB,MAAI,GAAAC,gBAAA,CAAGC,MAAA,CAAAC,KAAK,kBAC/BL,mBAAA,CAAkD,OAAlDM,UAAkD,EAA1B,OAAK,GAAAH,gBAAA,CAAGC,MAAA,CAAAG,SAAS,iB,GAE3CP,mBAAA,CAA8E;IAAtEQ,GAAG,EAAC,YAAY;IAAEC,KAAK,EAAEL,MAAA,CAAAM,WAAW;IAAGC,MAAM,EAAEP,MAAA,CAAAQ;0BAN3DC,UAAA,GAOeT,MAAA,CAAAU,QAAQ,I,cAAnBhB,mBAAA,CAIM,OAJNiB,UAIM,G,0BAHJf,mBAAA,CAAa,YAAT,MAAI,sBACRA,mBAAA,CAAwB,WAArB,QAAM,GAAAG,gBAAA,CAAGC,MAAA,CAAAC,KAAK,kBACjBL,mBAAA,CAA0C;IAAjCgB,OAAK,EAAAC,MAAA,QAAAA,MAAA;MAAA,OAAEb,MAAA,CAAAc,WAAA,IAAAd,MAAA,CAAAc,WAAA,CAAAC,KAAA,CAAAf,MAAA,EAAAgB,SAAA,CAAW;IAAA;KAAE,MAAI,E,KAVvCC,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}