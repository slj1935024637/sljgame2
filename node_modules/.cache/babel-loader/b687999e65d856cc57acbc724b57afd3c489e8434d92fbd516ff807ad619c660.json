{"ast":null,"code":"import _createForOfIteratorHelper from \"D:/slj_doc/game_2/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"D:/slj_doc/game_2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/slj_doc/game_2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport Player from './entities/Player';\nimport Enemy from './entities/Enemy';\nimport Projectile from './entities/Projectile';\nimport TerrainGenerator from './TerrainGenerator';\nimport InputHandler from './InputHandler';\nvar GameEngine = /*#__PURE__*/function () {\n  function GameEngine(canvas, ctx, store) {\n    _classCallCheck(this, GameEngine);\n    this.canvas = canvas;\n    this.ctx = ctx;\n    this.store = store;\n    this.lastTime = 0;\n    this.accumulator = 0;\n    this.timestep = 1000 / 60; // 60 FPS\n\n    this.player = null;\n    this.enemies = [];\n    this.projectiles = [];\n    this.terrain = null;\n    this.input = null;\n    this.camera = {\n      x: 0,\n      y: 0\n    };\n  }\n  return _createClass(GameEngine, [{\n    key: \"init\",\n    value: function init() {\n      // Initialize game components\n      this.player = new Player(this.canvas.width / 2, this.canvas.height / 2);\n      this.terrain = new TerrainGenerator();\n      this.input = new InputHandler(this);\n\n      // Generate initial enemies\n      this.spawnEnemies(5);\n    }\n  }, {\n    key: \"spawnEnemies\",\n    value: function spawnEnemies(count) {\n      for (var i = 0; i < count; i++) {\n        var x = Math.random() * this.canvas.width;\n        var y = Math.random() * this.canvas.height;\n        this.enemies.push(new Enemy(x, y));\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(timestamp) {\n      // Calculate delta time\n      var deltaTime = timestamp - this.lastTime;\n      this.lastTime = timestamp;\n\n      // Fixed timestep update\n      this.accumulator += deltaTime;\n      while (this.accumulator >= this.timestep) {\n        this.fixedUpdate(this.timestep);\n        this.accumulator -= this.timestep;\n      }\n\n      // Update game state in Vuex store\n      this.store.dispatch('updateGameState', {\n        player: {\n          health: this.player.health,\n          position: {\n            x: this.player.x,\n            y: this.player.y\n          }\n        },\n        enemies: this.enemies.map(function (enemy) {\n          return {\n            health: enemy.health,\n            position: {\n              x: enemy.x,\n              y: enemy.y\n            }\n          };\n        }),\n        projectiles: this.projectiles.map(function (proj) {\n          return {\n            position: {\n              x: proj.x,\n              y: proj.y\n            }\n          };\n        }),\n        score: this.score\n      });\n    }\n  }, {\n    key: \"fixedUpdate\",\n    value: function fixedUpdate(deltaTime) {\n      var _this = this;\n      // Update player\n      this.player.update(deltaTime, this.input.keys);\n\n      // Update enemies\n      this.enemies = this.enemies.filter(function (enemy) {\n        enemy.update(deltaTime, _this.player);\n        return enemy.health > 0;\n      });\n\n      // Update projectiles\n      this.projectiles = this.projectiles.filter(function (projectile) {\n        projectile.update(deltaTime);\n\n        // Check enemy collisions\n        var _iterator = _createForOfIteratorHelper(_this.enemies),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var enemy = _step.value;\n            if (projectile.checkCollision(enemy)) {\n              enemy.takeDamage(projectile.damage);\n              return false;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        return projectile.active;\n      });\n\n      // Update camera\n      this.updateCamera();\n    }\n  }, {\n    key: \"updateCamera\",\n    value: function updateCamera() {\n      // Camera follows player with smooth movement\n      var targetX = this.player.x - this.canvas.width / 2;\n      var targetY = this.player.y - this.canvas.height / 2;\n      this.camera.x += (targetX - this.camera.x) * 0.1;\n      this.camera.y += (targetY - this.camera.y) * 0.1;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var _this2 = this;\n      // Clear canvas\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n      // Save context state\n      this.ctx.save();\n\n      // Apply camera transform\n      this.ctx.translate(-this.camera.x, -this.camera.y);\n\n      // Draw game elements\n      this.terrain.draw(this.ctx);\n      this.projectiles.forEach(function (proj) {\n        return proj.draw(_this2.ctx);\n      });\n      this.enemies.forEach(function (enemy) {\n        return enemy.draw(_this2.ctx);\n      });\n      this.player.draw(this.ctx);\n\n      // Restore context state\n      this.ctx.restore();\n    }\n  }]);\n}();\nexport { GameEngine as default };","map":{"version":3,"names":["Player","Enemy","Projectile","TerrainGenerator","InputHandler","GameEngine","canvas","ctx","store","_classCallCheck","lastTime","accumulator","timestep","player","enemies","projectiles","terrain","input","camera","x","y","_createClass","key","value","init","width","height","spawnEnemies","count","i","Math","random","push","update","timestamp","deltaTime","fixedUpdate","dispatch","health","position","map","enemy","proj","score","_this","keys","filter","projectile","_iterator","_createForOfIteratorHelper","_step","s","n","done","checkCollision","takeDamage","damage","err","e","f","active","updateCamera","targetX","targetY","draw","_this2","clearRect","save","translate","forEach","restore","default"],"sources":["D:/slj_doc/game_2/src/game/GameEngine.js"],"sourcesContent":["import Player from './entities/Player'\nimport Enemy from './entities/Enemy'\nimport Projectile from './entities/Projectile'\nimport TerrainGenerator from './TerrainGenerator'\nimport InputHandler from './InputHandler'\n\nexport default class GameEngine {\n  constructor(canvas, ctx, store) {\n    this.canvas = canvas\n    this.ctx = ctx\n    this.store = store\n    \n    this.lastTime = 0\n    this.accumulator = 0\n    this.timestep = 1000 / 60 // 60 FPS\n\n    this.player = null\n    this.enemies = []\n    this.projectiles = []\n    this.terrain = null\n    this.input = null\n    \n    this.camera = {\n      x: 0,\n      y: 0\n    }\n  }\n\n  init() {\n    // Initialize game components\n    this.player = new Player(this.canvas.width / 2, this.canvas.height / 2)\n    this.terrain = new TerrainGenerator()\n    this.input = new InputHandler(this)\n    \n    // Generate initial enemies\n    this.spawnEnemies(5)\n  }\n\n  spawnEnemies(count) {\n    for (let i = 0; i < count; i++) {\n      const x = Math.random() * this.canvas.width\n      const y = Math.random() * this.canvas.height\n      this.enemies.push(new Enemy(x, y))\n    }\n  }\n\n  update(timestamp) {\n    // Calculate delta time\n    const deltaTime = timestamp - this.lastTime\n    this.lastTime = timestamp\n    \n    // Fixed timestep update\n    this.accumulator += deltaTime\n    while (this.accumulator >= this.timestep) {\n      this.fixedUpdate(this.timestep)\n      this.accumulator -= this.timestep\n    }\n\n    // Update game state in Vuex store\n    this.store.dispatch('updateGameState', {\n      player: {\n        health: this.player.health,\n        position: { x: this.player.x, y: this.player.y }\n      },\n      enemies: this.enemies.map(enemy => ({\n        health: enemy.health,\n        position: { x: enemy.x, y: enemy.y }\n      })),\n      projectiles: this.projectiles.map(proj => ({\n        position: { x: proj.x, y: proj.y }\n      })),\n      score: this.score\n    })\n  }\n\n  fixedUpdate(deltaTime) {\n    // Update player\n    this.player.update(deltaTime, this.input.keys)\n\n    // Update enemies\n    this.enemies = this.enemies.filter(enemy => {\n      enemy.update(deltaTime, this.player)\n      return enemy.health > 0\n    })\n\n    // Update projectiles\n    this.projectiles = this.projectiles.filter(projectile => {\n      projectile.update(deltaTime)\n      \n      // Check enemy collisions\n      for (const enemy of this.enemies) {\n        if (projectile.checkCollision(enemy)) {\n          enemy.takeDamage(projectile.damage)\n          return false\n        }\n      }\n      \n      return projectile.active\n    })\n\n    // Update camera\n    this.updateCamera()\n  }\n\n  updateCamera() {\n    // Camera follows player with smooth movement\n    const targetX = this.player.x - this.canvas.width / 2\n    const targetY = this.player.y - this.canvas.height / 2\n    \n    this.camera.x += (targetX - this.camera.x) * 0.1\n    this.camera.y += (targetY - this.camera.y) * 0.1\n  }\n\n  draw() {\n    // Clear canvas\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n    \n    // Save context state\n    this.ctx.save()\n    \n    // Apply camera transform\n    this.ctx.translate(-this.camera.x, -this.camera.y)\n    \n    // Draw game elements\n    this.terrain.draw(this.ctx)\n    this.projectiles.forEach(proj => proj.draw(this.ctx))\n    this.enemies.forEach(enemy => enemy.draw(this.ctx))\n    this.player.draw(this.ctx)\n    \n    // Restore context state\n    this.ctx.restore()\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}