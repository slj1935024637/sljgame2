{"ast":null,"code":"import _createForOfIteratorHelper from \"D:/slj_doc/game_2/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"D:/slj_doc/game_2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/slj_doc/game_2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.array.push.js\";\nvar TerrainGenerator = /*#__PURE__*/function () {\n  function TerrainGenerator() {\n    _classCallCheck(this, TerrainGenerator);\n    this.tiles = [];\n    this.tileSize = 32;\n    this.generateTerrain();\n  }\n  return _createClass(TerrainGenerator, [{\n    key: \"generateTerrain\",\n    value: function generateTerrain() {\n      // Simple flat terrain for now\n      var groundLevel = 500;\n      for (var x = -1000; x < 1000; x += this.tileSize) {\n        this.tiles.push({\n          x: x,\n          y: groundLevel,\n          width: this.tileSize,\n          height: this.tileSize,\n          type: 'ground'\n        });\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(ctx) {\n      ctx.fillStyle = '#4A5568';\n      var _iterator = _createForOfIteratorHelper(this.tiles),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var tile = _step.value;\n          ctx.fillRect(tile.x, tile.y, tile.width, tile.height);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"checkCollision\",\n    value: function checkCollision(entity) {\n      var _iterator2 = _createForOfIteratorHelper(this.tiles),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var tile = _step2.value;\n          if (this.checkEntityTileCollision(entity, tile)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return false;\n    }\n  }, {\n    key: \"checkEntityTileCollision\",\n    value: function checkEntityTileCollision(entity, tile) {\n      return entity.x < tile.x + tile.width && entity.x + entity.width > tile.x && entity.y < tile.y + tile.height && entity.y + entity.height > tile.y;\n    }\n  }]);\n}();\nexport { TerrainGenerator as default };","map":{"version":3,"names":["TerrainGenerator","_classCallCheck","tiles","tileSize","generateTerrain","_createClass","key","value","groundLevel","x","push","y","width","height","type","draw","ctx","fillStyle","_iterator","_createForOfIteratorHelper","_step","s","n","done","tile","fillRect","err","e","f","checkCollision","entity","_iterator2","_step2","checkEntityTileCollision","default"],"sources":["D:/slj_doc/game_2/src/game/TerrainGenerator.js"],"sourcesContent":["export default class TerrainGenerator {\n  constructor() {\n    this.tiles = []\n    this.tileSize = 32\n    this.generateTerrain()\n  }\n\n  generateTerrain() {\n    // Simple flat terrain for now\n    const groundLevel = 500\n    for (let x = -1000; x < 1000; x += this.tileSize) {\n      this.tiles.push({\n        x,\n        y: groundLevel,\n        width: this.tileSize,\n        height: this.tileSize,\n        type: 'ground'\n      })\n    }\n  }\n\n  draw(ctx) {\n    ctx.fillStyle = '#4A5568'\n    for (const tile of this.tiles) {\n      ctx.fillRect(tile.x, tile.y, tile.width, tile.height)\n    }\n  }\n\n  checkCollision(entity) {\n    for (const tile of this.tiles) {\n      if (this.checkEntityTileCollision(entity, tile)) {\n        return true\n      }\n    }\n    return false\n  }\n\n  checkEntityTileCollision(entity, tile) {\n    return entity.x < tile.x + tile.width &&\n           entity.x + entity.width > tile.x &&\n           entity.y < tile.y + tile.height &&\n           entity.y + entity.height > tile.y\n  }\n}\n"],"mappings":";;;;IAAqBA,gBAAgB;EACnC,SAAAA,iBAAA,EAAc;IAAAC,eAAA,OAAAD,gBAAA;IACZ,IAAI,CAACE,KAAK,GAAG,EAAE;IACf,IAAI,CAACC,QAAQ,GAAG,EAAE;IAClB,IAAI,CAACC,eAAe,CAAC,CAAC;EACxB;EAAC,OAAAC,YAAA,CAAAL,gBAAA;IAAAM,GAAA;IAAAC,KAAA,EAED,SAAAH,eAAeA,CAAA,EAAG;MAChB;MACA,IAAMI,WAAW,GAAG,GAAG;MACvB,KAAK,IAAIC,CAAC,GAAG,CAAC,IAAI,EAAEA,CAAC,GAAG,IAAI,EAAEA,CAAC,IAAI,IAAI,CAACN,QAAQ,EAAE;QAChD,IAAI,CAACD,KAAK,CAACQ,IAAI,CAAC;UACdD,CAAC,EAADA,CAAC;UACDE,CAAC,EAAEH,WAAW;UACdI,KAAK,EAAE,IAAI,CAACT,QAAQ;UACpBU,MAAM,EAAE,IAAI,CAACV,QAAQ;UACrBW,IAAI,EAAE;QACR,CAAC,CAAC;MACJ;IACF;EAAC;IAAAR,GAAA;IAAAC,KAAA,EAED,SAAAQ,IAAIA,CAACC,GAAG,EAAE;MACRA,GAAG,CAACC,SAAS,GAAG,SAAS;MAAA,IAAAC,SAAA,GAAAC,0BAAA,CACN,IAAI,CAACjB,KAAK;QAAAkB,KAAA;MAAA;QAA7B,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAA+B;UAAA,IAApBC,IAAI,GAAAJ,KAAA,CAAAb,KAAA;UACbS,GAAG,CAACS,QAAQ,CAACD,IAAI,CAACf,CAAC,EAAEe,IAAI,CAACb,CAAC,EAAEa,IAAI,CAACZ,KAAK,EAAEY,IAAI,CAACX,MAAM,CAAC;QACvD;MAAC,SAAAa,GAAA;QAAAR,SAAA,CAAAS,CAAA,CAAAD,GAAA;MAAA;QAAAR,SAAA,CAAAU,CAAA;MAAA;IACH;EAAC;IAAAtB,GAAA;IAAAC,KAAA,EAED,SAAAsB,cAAcA,CAACC,MAAM,EAAE;MAAA,IAAAC,UAAA,GAAAZ,0BAAA,CACF,IAAI,CAACjB,KAAK;QAAA8B,MAAA;MAAA;QAA7B,KAAAD,UAAA,CAAAV,CAAA,MAAAW,MAAA,GAAAD,UAAA,CAAAT,CAAA,IAAAC,IAAA,GAA+B;UAAA,IAApBC,IAAI,GAAAQ,MAAA,CAAAzB,KAAA;UACb,IAAI,IAAI,CAAC0B,wBAAwB,CAACH,MAAM,EAAEN,IAAI,CAAC,EAAE;YAC/C,OAAO,IAAI;UACb;QACF;MAAC,SAAAE,GAAA;QAAAK,UAAA,CAAAJ,CAAA,CAAAD,GAAA;MAAA;QAAAK,UAAA,CAAAH,CAAA;MAAA;MACD,OAAO,KAAK;IACd;EAAC;IAAAtB,GAAA;IAAAC,KAAA,EAED,SAAA0B,wBAAwBA,CAACH,MAAM,EAAEN,IAAI,EAAE;MACrC,OAAOM,MAAM,CAACrB,CAAC,GAAGe,IAAI,CAACf,CAAC,GAAGe,IAAI,CAACZ,KAAK,IAC9BkB,MAAM,CAACrB,CAAC,GAAGqB,MAAM,CAAClB,KAAK,GAAGY,IAAI,CAACf,CAAC,IAChCqB,MAAM,CAACnB,CAAC,GAAGa,IAAI,CAACb,CAAC,GAAGa,IAAI,CAACX,MAAM,IAC/BiB,MAAM,CAACnB,CAAC,GAAGmB,MAAM,CAACjB,MAAM,GAAGW,IAAI,CAACb,CAAC;IAC1C;EAAC;AAAA;AAAA,SA1CkBX,gBAAgB,IAAAkC,OAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}